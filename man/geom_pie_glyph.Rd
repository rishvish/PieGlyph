% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_pie_glyph.R
\name{geom_pie_glyph}
\alias{geom_pie_glyph}
\title{Scatter plot with pie glyphs}
\usage{
geom_pie_glyph(
  mapping = NULL,
  data = NULL,
  categories,
  values = NA,
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic (see Aesthetics below) mappings to be created by \code{\link[ggplot2:aes]{aes()}} or \code{\link[ggplot2:aes_]{aes_()}}. If specified and inherit.aes = TRUE (the default), it is combined with the default mapping at the top level of the plot. You must supply mapping if there is no plot mapping.}

\item{data}{The data to be displayed in this layer of the plot. The default, \code{NULL}, inherits the plot data specified in the \code{\link[ggplot2:ggplot]{ggplot()}} call.}

\item{categories}{Each pie glyph in the plot shows the relative abundances of a set of categories; those categories are specified by this argument. The names of the categories can be stacked and contained in a single column (long format using \code{\link[tidyr:pivot_longer]{pivot_longer()}}) or can be the names of individual columns (wide format). The categories can also be specified as the numeric indices of the columns.}

\item{values}{If the categories are stacked in one column, this parameter describes the column for the values of the categories shown in the pie glyphs. The values should be numeric and the proportions of the different categories within each observation will be calculated automatically. The default is \code{NA} assuming that the categories are in separate columns.}

\item{stat}{The statistical transformation to use on the data for this layer, as a string}

\item{position}{Position adjustment to avoid overlapping of pie glyphs.}

\item{na.rm}{If all categories for an observation are NA, the observation is dropped while if at least one category is not NA, the other categories are assumed to be 0. This parameter indicates whether the user is notified about these changes. If FALSE, the default, user is given a warning. If TRUE, observations are silently removed/modified to 0, without notifying the user.}

\item{show.legend}{Logical. Should this layer be included in the legends? NA, the default, includes if any aesthetics are mapped. FALSE never includes, and TRUE always includes.}

\item{inherit.aes}{If FALSE, overrides the default aesthetics, rather than combining with them}

\item{...}{Other arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value, like colour = "red" or radius = 1. They may also be parameters to the paired geom/stat.}
}
\value{
A ggplot layer
}
\description{
This geom helps to replace the points in a scatter plot with pie-chart glyphs showing the relative proportions of different categories. The pie glyphs are independent of the plot dimensions, so won't distort when the plot is scaled.
}
\section{Aesthetics}{

geom_pie_glyph understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{x} - variable to be shown on X-axis
\item \strong{y} - variable to be shown on Y-axis
\item alpha - adjust opacity of the pie glyphs
\item radius - adjust the radius of the pie glyphs (in cm)
\item colour - specify colour of the border of pie glyphs
\item linetype - specify style of pie glyph borders
\item size - specify width of pie glyph borders (in mm)
}
}

\examples{

########### Example from ecology

### Create a pie-scatter plot of the response vs richness in an ecosystem
### with each pie representing the proportion of the different species
### in a particular community

#install.packages(DImodels)
library(PieGlyph)
library(DImodels)
library(tidyr)
library(ggplot2)
library(dplyr)

## Load the data
## This data consists of 4 species named p1, p2, p3 and p4 comprised of 15
## communities with varying proportions of each species. Each of these 15
## communities is then replicated across 4 blocking structures. The
## response can be assumed to be the yield of each community.
data(sim1)
species <- paste0('p',1:4)

## Add richness (number of species) and evenness (measure of uniformity
## between species proportions) to the data and stack species proportions
## together for plotting
plot_data <- sim1 \%>\%
             filter(block \%in\% c(1,2)) \%>\%
             mutate(Richness = rowSums(.[, species] != 0),
                    Evenness = DI_data(prop = species, what = 'E', data = .)) \%>\%
             pivot_longer(cols = all_of(species),
                          names_to = 'Species', values_to = 'Prop')

## Create a response vs richness plot with points replaced by pie glyphs
## depicting the proportions of the different species in the community
ggplot(data = plot_data)+
    geom_pie_glyph(aes(x = Richness, y = response, group = Evenness),
    categories = 'Species', values = 'Prop', colour = NA,
    position = position_dodge(1))+
    facet_wrap(~block)+
    labs(y = 'Response', x = 'Richness')+
    theme_classic()


############# Spatial example

### Creating a map of the US states with pie charts at the center of each
### state representing the proportions of arrests in the state across murder,
### rape and assault

#install.packages('maps')
library(dplyr)
library(ggplot2)

## All datasets available in base R
## Get latitude and longitude values for US states
states <- map_data("state")

## Data showing counts of arrests per 100,000 residents for assault, murder,
## and rape in each of the 50 US states in 1973
arrests <- USArrests

## Data showing the geographical center of US states
centers <- state.center

## Add state centers to arrests data
arrests <- arrests \%>\% mutate(region = tolower(rownames(USArrests)),
                              pie_lat = centers$y,
                              pie_long = centers$x)

## Merge map data with arrests data to get coordinates to place pie glyphs
choro <- merge(states, arrests, sort = FALSE, by = "region")
pie_data <- choro \%>\% group_by(region) \%>\% slice(1) \%>\%
                      select(region, pie_lat, pie_long,
                             Murder, Assault, Rape)

## Create plot (Can also create without stacking the category values together)
ggplot(states, aes(x = long, y = lat)) +
   geom_polygon(aes(group = group),
                fill = 'darkseagreen', colour = 'black')+
   geom_pie_glyph(aes(y = pie_lat, x = pie_long),
                  data = pie_data, categories = 4:6,
                  radius = 1, colour = 'black', alpha = 0.7)+
   coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
   labs(x = 'Longitude', y ='Latitude')+
   theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
   scale_fill_brewer(palette = 'Dark2')


############# Compositions example

### Create a lollipop plot showing relationship between probability of having
### a disease and the abundances of four different proteins in the blood

#install.packages('compositions')
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)


## Load data
## This data records the proportions of the 4 serum proteins from blood
## samples of 30 patients, 14 with known disease A, 16 with known disease B,
## and 6 new cases.
data("SerumProtein", package = 'compositions')

## Fit Logistic regression model to assess relationship between probability
## of having disease A and the four protein types
disease_data <- as_tibble(SerumProtein) \%>\%
                    mutate(Type = factor(ifelse(Type == 1, 'Yes', 'No')))
m1 <- glm(Type ~ a + b + c + d, data = disease_data,
          family=binomial(link='logit'))
summary(m1)

## Prepare data for plotting by adding the predicted probability of having
## the disease to the data and case number
## The data is then arranged in descending order of the predicted probabilities
## and the marker proportions are stacked together for plotting
plot_data <- disease_data \%>\%
   mutate('prediction' = predict(m1, type = 'response'),
          'n' = as.character(1:nrow(.))) \%>\%
   arrange(desc(prediction)) \%>\%
   mutate(n = fct_inorder(n)) \%>\%
   pivot_longer(cols = c('a','b','c','d'), names_to = 'Marker',
                values_to = 'Proportion')

## Create lollipop plot
ggplot(data = plot_data, aes(x = n, y = prediction, fill = Marker))+
  geom_segment(aes(yend = 0, xend = n))+
  geom_pie_glyph(categories = 'Marker', values = 'Proportion',
                 radius = 0.75, colour = 'black')+
  labs(y = 'Prob(Having Disease)', x = 'Case')+
  theme_minimal()
}
