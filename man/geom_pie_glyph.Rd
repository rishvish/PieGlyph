% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_pie_glyph.R
\name{geom_pie_glyph}
\alias{geom_pie_glyph}
\title{geom_pie_glyph}
\usage{
geom_pie_glyph(
  mapping = NULL,
  data = NULL,
  categories,
  values = NA,
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aes mappings created by \code{\link[ggplot2:aes]{aes()}} or \code{\link[ggplot2:aes_]{aes_()}}}

\item{data}{The data to be displayed in this layer. The default, \code{NULL}, inherits the plot data specified in the \code{\link[ggplot2:ggplot]{ggplot()}} call.}

\item{categories}{Columns in the data with the categories for the pies (can also be a single column if data is in long format). To be specified either as column indices or column names}

\item{values}{Column with values for the categories of the pies (if data is in long format). The default is \code{NA} if data not in long format.}

\item{stat}{The statistical transformation to use on the data for this layer, as a string}

\item{position}{Position adjustment to avoid overlapping of pies.}

\item{na.rm}{If FALSE, the default, missing values are removed with a warning. If TRUE, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends? NA, the default, includes if any aesthetics are mapped. FALSE never includes, and TRUE always includes.}

\item{inherit.aes}{If FALSE, overrides the default aesthetics, rather than combining with them}

\item{...}{Other arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value, like colour = "red" or size = 3. They may also be parameters to the paired geom/stat.}
}
\value{
layer
}
\description{
geom_pie_glyph
}
\section{Aesthetics}{

geom_pie_glyph understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{x} - variable to be shown on X-axis
\item \strong{y} - variable to be shown on Y-axis
\item alpha - adjust opacity of the pies
\item size - adjust the radius of the pies (in cm)
\item colour - colour of border of pies
\item linetype - style of pie borders
\item lwd - width of pie borders (in mm)
}
}

\examples{

########### Examples from ecology

#install.packages(DImodels)
library(PieGlyph)
library(DImodels)
library(tidyr)
library(ggplot2)

## Load the data
data(sim1)

## Convert data into long-format
plot_data <- pivot_longer(data = sim1, cols = paste0('p',1:4),
                          names_to = 'Species', values_to = 'Prop')

## Create plot
ggplot(data = plot_data)+
    geom_pie_glyph(aes(x = community, y = response), categories = 'Species',
                   values = 'Prop', size = 0.7, colour = NA)+
    facet_wrap(~block)+
    labs(y = 'Response', x = 'Community')+
    theme_classic()


############# Spatial example

library(dplyr)
library(ggplot2)

## Get US map data
states <- map_data("state")

## Data showing breakdown of the arrests in all US states
arrests <- USArrests
arrests <- arrests \%>\% mutate(region = tolower(rownames(USArrests)),
                              pie_lat = state.center$y,
                              pie_long = state.center$x)

## Merge map data with arrests data to get coordinates to place pies
choro <- merge(states, arrests, sort = FALSE, by = "region")
pie_data <- choro \%>\% group_by(region) \%>\% slice(1) \%>\%
                      select(region, pie_lat, pie_long, Murder, Assault, Rape)

## Create plot (Can also create without converting data in long format)
ggplot(states, aes(x = long, y = lat)) +
   geom_polygon(aes(group = group), fill = 'darkseagreen', colour = 'black')+
   geom_pie_glyph(aes(y = pie_lat, x = pie_long),
                  data = pie_data, categories = 4:6,
                  size = 0.75, colour = 'black', alpha = 0.7)+
   coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
   labs(x = 'Longitude', y ='Latitude')+
   theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
   scale_fill_brewer(palette = 'Dark2')


############# Compositions example

#install.packages('compositions')

## Load data
data("SerumProtein", package = 'compositions')

## Fit Logistic regression model
disease_data <- as_tibble(SerumProtein) \%>\% mutate(Type = factor(ifelse(Type == 1, 'Yes', 'No')))
m1 <- glm(Type ~ a + b + c + d, data = disease_data, family=binomial(link='logit'))

## Create plot
disease_data \%>\%
   mutate('prediction' = predict(m1, type = 'response')) \%>\%
   arrange(desc(prediction)) \%>\%
   mutate('n' = 1:nrow(.)) \%>\%
   pivot_longer(cols = c('a','b','c','d'), names_to = 'Marker', values_to = 'Proportion') \%>\%
   ggplot(data = ., aes(x = n, y = prediction, fill = Marker))+
     geom_segment(aes(yend = 0, xend = n))+
     geom_pie_glyph(categories = 'Marker', values = 'Proportion', size = 0.5)+
     labs(y = 'Prob(Having Disease)', x = 'Case')+
     theme_minimal()
}
