% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_pie_glyph.R
\name{geom_pie_glyph}
\alias{geom_pie_glyph}
\title{Scatter plot with pie-chart glyphs}
\usage{
geom_pie_glyph(
  mapping = NULL,
  data = NULL,
  categories,
  values = NA,
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic (see Aesthetics below) mappings to be created by \code{\link[ggplot2:aes]{aes()}} or \code{\link[ggplot2:aes_]{aes_()}}. If specified and inherit.aes = TRUE (the default), it is combined with the default mapping at the top level of the plot. You must supply mapping if there is no plot mapping.}

\item{data}{The data to be displayed in this layer of the plot. The default, \code{NULL}, inherits the plot data specified in the \code{\link[ggplot2:ggplot]{ggplot()}} call.}

\item{categories}{Each pie glyph in the plot shows the relative abundances of a set of categories; those categories are specified by this argument. The names of the categories can be stacked and contained in a single column (long format using \code{\link[tidyr:pivot_longer]{pivot_longer()}}) or can be the names of individual columns (wide format). The categories can also be specified as the numeric indices of the columns.}

\item{values}{If the categories are stacked in one column, this parameter describes the column for the values of the categories shown in the pie glyphs. The values should be numeric and the proportions of the different categories within each observation will be calculated automatically. The default is \code{NA} assuming that the categories are in separate columns.}

\item{stat}{The statistical transformation to use on the data for this layer, as a string}

\item{position}{Position adjustment to avoid overlapping of pie glyphs.}

\item{na.rm}{If all categories for an observation are NA, the observation is dropped while if at least one category is not NA, the other categories are assumed to be 0. This parameter indicates whether the user is notified about these changes. If FALSE, the default, user is given a warning. If TRUE, observations are silently removed/modified to 0, without notifying the user.}

\item{show.legend}{Logical. Should this layer be included in the legends? NA, the default, includes if any aesthetics are mapped. FALSE never includes, and TRUE always includes.}

\item{inherit.aes}{If FALSE, overrides the default aesthetics, rather than combining with them}

\item{...}{Other arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value, like colour = "red" or radius = 1. They may also be parameters to the paired geom/stat.}
}
\value{
A ggplot layer
}
\description{
This geom helps to replace the points in a scatter plot with pie-chart glyphs showing the relative proportions of different categories. The pie glyphs are independent of the plot dimensions, so won't distort when the plot is scaled.
}
\section{Aesthetics}{

geom_pie_glyph understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{x} - variable to be shown on X-axis
\item \strong{y} - variable to be shown on Y-axis
\item alpha - adjust opacity of the pie glyphs
\item radius - adjust the radius of the pie glyphs (in cm)
\item colour - specify colour of the border of pie glyphs
\item linetype - specify style of pie glyph borders
\item size - specify width of pie glyph borders (in mm)
}
}

\examples{

## Load libraries
library(tidyverse)
library(PieGlyph)

## Simulate raw data
set.seed(123)
plot_data <- data.frame(response = rnorm(10, 100, 30),
                        system = 1:10,
                        group = sample(size = 10,
                                       x = c('G1', 'G2', 'G3'),
                                       replace = TRUE),
                        A = round(runif(10, 3, 9), 2),
                        B = round(runif(10, 1, 5), 2),
                        C = round(runif(10, 3, 7), 2),
                        D = round(runif(10, 1, 9), 2))

head(plot_data)

## Basic plot
ggplot(data = plot_data, aes(x = system, y = response))+
   geom_pie_glyph(categories = c('A', 'B', 'C', 'D'),
                  data = plot_data)+
   theme_minimal()


## Change pie radius and border colour
ggplot(data = plot_data, aes(x = system, y = response))+
       # Can also specify categories as column indices
       geom_pie_glyph(categories = 4:7, data = plot_data,
                      colour = 'black', radius = 1)+
       theme_minimal()


## Map size to a variable
p <- ggplot(data = plot_data, aes(x = system, y = response))+
geom_pie_glyph(aes(radius = group),
            categories = c('A', 'B', 'C', 'D'),
            data = plot_data, colour = 'black')+
            theme_minimal()
p


## Add custom labels
p <- p + labs(x = 'System', y = 'Response',
              fill = 'Attributes', radius = 'Group')
p


## Change category colours
p + scale_fill_manual(values = c('#56B4E9', '#CC79A7',
                                 '#F0E442', '#D55E00'))



##### Stack the attributes in one column
# The attributes can also be stacked into one column to generate
# the plot. The benefit of doing this is that we do not need to
# specify the data again in the geom_pie_glyph function

plot_data_stacked <- plot_data \%>\%
                        pivot_longer(cols = c('A','B','C','D'),
                                     names_to = 'Attributes',
                                     values_to = 'values')
head(plot_data_stacked, 8)


ggplot(data = plot_data_stacked, aes(x = system, y = response))+
  # Along with categories column, values column is also needed now
  geom_pie_glyph(categories = 'Attributes', values = 'values')+
  theme_minimal()
}
