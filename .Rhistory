scale_fill_manual(values = c('#56B4E9', '#D55E00','#CC79A7'))+
# Labels for axes and legend
labs(y = 'Sepal Width', x = 'Sepal Length', fill = 'Prob (Species)')+
# Adjusting the borders colours and linetypes
scale_linetype_manual(values = c(1, 3))+
scale_colour_manual(values = c('black', 'white'))
ggplot(data=plot_data,
aes(x=Sepal.Length, y=Sepal.Width))+
# Pies-charts showing predicted probabilities of the different species
geom_pie_glyph(aes(linetype = Classification,  colour = Classification), slices = names(preds)) + # Using the pie-border to highlight if the same was classified correctly
# Colours for sectors of the pie-chart
scale_fill_manual(values = c('#56B4E9', '#D55E00','#CC79A7'))+
# Labels for axes and legend
labs(y = 'Sepal Width', x = 'Sepal Length', fill = 'Prob (Species)')+
# Adjusting the borders colours and linetypes
scale_linetype_manual(values = c(1, 3))+
scale_colour_manual(values = c('black', 'white'))+
theme_minimal()+
theme(panel.grid = element_line(colour = 'darkgrey'),
plot.background = element_rect(fill = 'grey'))
ggplot(data=plot_data,
aes(x=Sepal.Length, y=Sepal.Width))+
# Pies-charts showing predicted probabilities of the different species
geom_pie_glyph(aes(linetype = Classification,  colour = Classification), slices = names(preds)) + # Using the pie-border to highlight if the same was classified correctly
# Colours for sectors of the pie-chart
scale_fill_manual(values = c('#56B4E9', '#D55E00','#CC79A7'))+
# Labels for axes and legend
labs(y = 'Sepal Width', x = 'Sepal Length', fill = 'Prob (Species)')+
# Adjusting the borders colours and linetypes
scale_linetype_manual(values = c(1, 3))+
scale_colour_manual(values = c('black', 'white'))+
theme_minimal()
ggplot(data=plot_data,
aes(x=Sepal.Length, y=Sepal.Width))+
# Pies-charts showing predicted probabilities of the different species
geom_pie_glyph(aes(linetype = Classification,  colour = Classification), slices = names(preds)) + # Using the pie-border to highlight if the same was classified correctly
# Colours for sectors of the pie-chart
scale_fill_manual(values = c('#56B4E9', '#D55E00','#CC79A7'))+
# Labels for axes and legend
labs(y = 'Sepal Width', x = 'Sepal Length', fill = 'Prob (Species)')+
# Adjusting the borders colours and linetypes
scale_linetype_manual(values = c(1, 3))+
scale_colour_manual(values = c('black', 'white'))+
#theme_minimal()+
theme(panel.grid = element_line(colour = 'darkgrey'),
plot.background = element_rect(fill = 'grey'))
ggplot(data=plot_data,
aes(x=Sepal.Length, y=Sepal.Width))+
# Pies-charts showing predicted probabilities of the different species
geom_pie_glyph(aes(linetype = Classification,  colour = Classification), slices = names(preds)) + # Using the pie-border to highlight if the same was classified correctly
# Colours for sectors of the pie-chart
scale_fill_manual(values = c('#56B4E9', '#D55E00','#CC79A7'))+
# Labels for axes and legend
labs(y = 'Sepal Width', x = 'Sepal Length', fill = 'Prob (Species)')+
# Adjusting the borders colours and linetypes
scale_linetype_manual(values = c(1, 3))+
scale_colour_manual(values = c('black', 'white'))+
theme_minimal()+
theme(panel.grid = element_line(colour = 'darkgrey'),
plot.background = element_rect(fill = 'grey'))
draw_key_point
plot_data
library(scatterpie)
library(PieGlyph)
library(tidyverse)
Seatbelts <- data.frame(Seatbelts, time = time(Seatbelts))
Seatbelts
?Seatbelts
1984-1969
Seatbelts <- data.frame(Seatbelts, time = time(Seatbelts))
Seatbelts
plot_data <- Seatbelts[133:192, ]
head(plot_data)
p <- ggplot(plot_data, aes(x = time, y = DriversKilled))+
geom_line(linewidth = 1)+
geom_scatterpie(aes(x = time, y = DriversKilled),
colour = 'black',
data = plot_data[132:192, ],
cols = c('drivers','front', 'rear'))+
theme_minimal()
p
plot_data <- Seatbelts[133:192, ]
plot_data
p <- ggplot(plot_data, aes(x = time, y = DriversKilled))+
geom_line(linewidth = 1)+
geom_scatterpie(aes(x = time, y = DriversKilled),
colour = 'black',
data = plot_data[132:192, ],
cols = c('drivers','front', 'rear'))+
theme_minimal()
p
p <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_scatterpie(aes(x = time, y = kms),
colour = 'black',
data = plot_data[132:192, ],
cols = c('drivers','front', 'rear'))+
theme_minimal()
p
p <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_scatterpie(aes(x = time, y = kms),
colour = 'black',
data = plot_data,
cols = c('drivers','front', 'rear'))+
theme_minimal()
p
p + coord_equal()
pl <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_pie_glyph(aes(linetype = as.factor(law)),
colour = 'black',
slices = c('drivers', 'front', 'rear'))+
labs(x = 'Year', y = 'Km driver',
fill = 'People Killed', linetype = 'Law in Effect?')+
scale_linetype_manual(values = c(1, 3))+
theme_minimal()
pl
pl <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_pie_glyph(colour = 'black',
slices = c('drivers', 'front', 'rear'))+
labs(x = 'Year', y = 'Km driver',
fill = 'People Killed', linetype = 'Law in Effect?')+
theme_minimal()
pl
pl <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_pie_glyph(aes(linetype = as.factor(law)),
colour = 'black',
slices = c('drivers', 'front', 'rear'))+
labs(x = 'Year', y = 'Km driver',
fill = 'People Killed', linetype = 'Law in Effect?')+
scale_linetype_manual(values = c(1, 3))+
theme_minimal()
pl
pl <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_pie_glyph(aes(linetype = as.factor(law)),
colour = 'black',
slices = c('drivers', 'front', 'rear'))+
labs(x = 'Year', y = 'Km driver',
fill = 'People Killed', linetype = 'Law in Effect?')+
scale_linetype_manual(values = c(1, 3),
labels = c('Yes', 'No'))+
theme_minimal()
pl
pl <- ggplot(plot_data, aes(x = time, y = kms))+
geom_line(linewidth = 1)+
geom_pie_glyph(aes(linetype = as.factor(law)),
colour = 'black',
slices = c('drivers', 'front', 'rear'))+
labs(x = 'Year', y = 'Km driven',
fill = 'People Killed', linetype = 'Law in Effect?')+
scale_linetype_manual(values = c(1, 3),
labels = c('Yes', 'No'))+
theme_minimal()
pl
pl +
# Colours of the pie-sectors
scale_fill_manual(values = c('#56B4E9','#F0E442','#CC79A7'))+
# Axis and legend titles
labs(x = 'Year', y = 'Km driven',
fill = 'People Killed', linetype = 'Law in Effect?')
library(PieGlyph)
pkgdown::build_site()
library(PieGlyph)
pkgdown::build_site()
library(PieGlyph)
library(ggplot2)
library(forcats)
library(dplyr)
library(tidyr)
model_data <- data.frame('ID' = paste0('P', 1:20),
'A' = c(90, 60, 30, 75, 85,
30, 50, 70, 65, 65,
40, 115, 165, 40, 175,
200, 185, 250, 190, 175),
'B' = c(170, 180, 130, 325, 180,
220, 335, 285, 85, 125,
250, 190, 60, 205, 125,
90, 95, 25, 60, 20),
'C' = c(60, 35, 95, 50, 15,
190, 15, 80, 310, 280,
185, 115, 220, 190, 155,
135, 180, 120, 100, 140),
'D' = c(180, 225, 245, 50, 220,
60, 100, 65, 40, 30,
25, 80, 55, 65, 45,
75, 30, 105, 150, 165),
'Disease' = factor(c(rep(c('Yes'), 10),
rep(c('No'), 10))))
head(model_data)
m1 <- glm(Disease ~ 0 + A + B + C + D,
data = model_data,
family = binomial(link = 'logit'))
summary(m1)
plot_data <- model_data %>%
# Add predictions
mutate('prediction' = predict(m1, type = 'response')) %>%
# Sort in descending order of prediction
arrange(desc(prediction)) %>%
# Relevel ID for plotting in descending order
mutate(ID = fct_inorder(ID)) %>%
# Stack the four markers in one column
pivot_longer(cols = c('A', 'B', 'C','D'), names_to = 'Marker',
values_to = 'Proportion')
head(plot_data, 8)
plot_data
ggplot(data = plot_data)+
geom_col(aes(x = unique(ID), y = unique(prediction)))+
# Add axis titles
labs(y = 'Prob(Having Disease)', x = 'Patient')+
theme_minimal()
ggplot(data = filter(plot_data, Marker == 'A'))+
geom_col(aes(x = ID, y = prediction))+
# Add axis titles
labs(y = 'Prob(Having Disease)', x = 'Patient')+
theme_minimal()
pkgdown::build_site()
R CMD check --as-cran
?check
?devtools::check
?DImodels
??DImodels
?maps
??maps
install.packages('maps')
'maps' %in% installed.packages()
?geom_pie_glyph
?scale_radius
' library(tidyverse)
library(PieGlyph)
## Simulate raw data
set.seed(789)
plot_data <- data.frame(y = rnorm(10, 100, 30),
x = 1:10,
group = sample(size = 10,
x = c(1, 2, 3),
replace = TRUE),
A = round(runif(10, 3, 9), 2),
B = round(runif(10, 1, 5), 2),
C = round(runif(10, 3, 7), 2),
D = round(runif(10, 1, 9), 2))
head(plot_data)
library(tidyverse)
library(PieGlyph)
## Simulate raw data
set.seed(789)
plot_data <- data.frame(y = rnorm(10, 100, 30),
x = 1:10,
group = sample(size = 10,
x = c(1, 2, 3),
replace = TRUE),
A = round(runif(10, 3, 9), 2),
B = round(runif(10, 1, 5), 2),
C = round(runif(10, 3, 7), 2),
D = round(runif(10, 1, 9), 2))
head(plot_data)
## Create plot
p <- ggplot(data = plot_data)+
geom_pie_glyph(aes(x = x, y = y, radius = group),
slices = c('A', 'B', 'C', 'D'))+
labs(y = 'Response', x = 'System',
fill = 'Attributes')+
theme_classic()
p
p + scale_radius_continuous(range = c(0.5, 1))
plot_data
p + scale_radius_continuous(range = c(0.25, 0.5))
p <- ggplot(data = plot_data)+
geom_pie_glyph(aes(x = x, y = y, radius = group),
slices = c('A', 'B', 'C', 'D'))+
labs(y = 'Response', x = 'System',
fill = 'Attributes')+
theme_classic()
p
p + scale_radius_continuous(range = c(0.25, 0.5))
p + scale_radius_continuous(range = c(0.1, 0.5))
p <- ggplot(data = plot_data)+
geom_pie_glyph(aes(x = x, y = y, radius = group),
slices = c('A', 'B', 'C', 'D'))+
labs(y = 'Response', x = 'System',
fill = 'Attributes')+
theme_classic()
p
p + scale_radius_continuous(range = c(0.1, 0.5))
p + scale_radius_continuous(range = c(0.2, 0.5))
q <- ggplot(data = plot_data)+
geom_pie_glyph(aes(x = x, y = y,
radius = as.factor(group)),
slices = c('A', 'B', 'C', 'D'))+
labs(y = 'Response', x = 'System',
fill = 'Attributes', radius = 'Group')+
theme_classic()
q + scale_radius_discrete(range = c(0.05, 0.2), unit = 'in',
name = 'Group')
q + scale_radius_manual(values = c(5, 20, 10), unit = 'mm',
labels = paste0('G', 1:3), name = 'G')
q + scale_radius_manual(values = c(2.5, 10, 5), unit = 'mm',
labels = paste0('G', 1:3), name = 'G')
q + scale_radius_manual(values = c(2.5, 5, 3), unit = 'mm',
labels = paste0('G', 1:3), name = 'G')
q + scale_radius_manual(values = c(1, 5, 3), unit = 'mm',
labels = paste0('G', 1:3), name = 'G')
q + scale_radius_manual(values = c(1, 5, 3), unit = 'cm',
labels = paste0('G', 1:3), name = 'G')
q + scale_radius_manual(values = c(2, 6, 4, unit = 'mm',
labels = paste0('G', 1:3), name = 'G')
q + scale_radius_manual(values = c(2, 6, 4), unit = 'mm',
labels = paste0('G', 1:3), name = 'G')
name = 'Group')
q + scale_radius_discrete(range = c(0.05, 0.2), unit = 'in',
name = 'Group')
?par
?build_win
??build_win
devtools::build_win
install.packages('maps')
?par
?mapproj
??mapproj
ggplot2::coord_map
ggplot2:::CoordMap
?par
?scale_size_continuous
?scale_date_continuous
?scale_date_discrete
?on.exit
?ggfun
?ggforce
??ggforce
??ggplot
??ggplot2
??ggplot2
?ggp,o
?ggplot2
?plotly::plotly
??ggforce
??cowplot
?ggplot2
??patchwork
??cowplot
??metR
scale_alpha
ggplot2::continuous_scale
?ggplot2::continuous_scale
?Multinom
??Multinom
?ranger
??ranger
??ranger
??ranger
library(ranger)
?ranger
remove.packages('ranger')
ranger
install.packages('ranger')
install.packages("ranger")
?data.table
library(devtools)
build_win()
build_win()
install.packages('devtools')
install.packages("devtools")
library(devtools)
?release
Version(devtools)
version
require('ranger')
require('ranger1')
remove.packages('ggiraph')
requireNamespace('ggiraph')
if(require('ranger'))
remove.packages('ranger')
sapply('ranger', requireNamespace, quietly = TRUE)
sapply('ranger1', requireNamespace, quietly = TRUE)
# install.packages('ranger')
library(ranger)
library(ggplot2)
library(PieGlyph)
library(dplyr)
requireNamespace('ranger', quietly = TRUE)
requireNamespace('ranger', quietly = TRUE)
?requireNamespace
('ranger' %in% installed.packages())
library(PieGlyph)
library(ggplot2)
library(dplyr)
c('maps', 'mapproj') %in% installed.packages())
c('maps', 'mapproj') %in% installed.packages()
any(c('maps', 'mapproj') %in% installed.packages())
all(c('maps', 'mapproj') %in% installed.packages())
!all(c('maps', 'mapproj') %in% installed.packages())
install.packages('ranger')
install.packages("ranger")
remove.packages('maps')
library(PieGlyph)
library(ggplot2)
library(dplyr)
!all(c('maps', 'mapproj') %in% installed.packages())
!all(c('maps', 'mapproj') %in% installed.packages())
all(c('maps', 'mapproj') %in% installed.packages())
(c('maps', 'mapproj') %in% installed.packages())
(c('maps', 'mapproj') %in% c('maps', 'mapproj'))
all(c('maps', 'mapproj') %in% c('maps', 'mapproj'))
all(c('maps', 'mapproj') %in% c('maps'))
(c('maps', 'mapproj') %in% c('maps'))
(!c('maps', 'mapproj') %in% c('maps'))
any(!c('maps', 'mapproj') %in% c('maps'))
any(!c('maps', 'mapproj') %in% c('maps', mapproj))
any(!c('maps', 'mapproj') %in% c('maps', 'mapproj'))
!all(c('maps', 'mapproj') %in% c('maps', 'mapproj'))
!all(c('maps', 'mapproj') %in% c('maps1', 'mapproj'))
!all(c('maps', 'mapproj') %in% c('maps1', 'mapproj1'))
!all(c('maps', 'mapproj') %in% c('maps', 'mapproj1'))
!all(c('maps', 'mapproj') %in% c('maps', 'mapproj'))
all(c('maps', 'mapproj') %in% c('maps', 'mapproj'))
(c('maps', 'mapproj') %in% c('maps', 'mapproj'))
(c('maps', 'mapproj') %in% c('mapproj'))
all(c('maps', 'mapproj') %in% c('mapproj'))
install.packages('maps')
installed.packages()
library(mapproj)
install.packages('maps')
'maps' %in% installed.packages()
library(PieGlyph)
library(ggplot2)
library(dplyr)
c('maps', 'mapproj') %in% installed.packages()
all(c('maps', 'mapproj') %in% installed.packages())
installed.packages
library(mapdata)
library(mapproj)
library(maptools)
library(fastmap)
remove.packages("fastmap")
remove.packages("mapproj")
remove.packages("mapdata")
remove.packages("maptools")
all(c('maps', 'mapproj') %in% installed.packages())
install.packages('maps')
all(c('maps', 'mapproj') %in% installed.packages())
install.packages('fastmap')
install.packages('mapproj')
?ggplot2::coord_map
library(PieGlyph)
library(ggplot2)
library(dplyr)
set.seed(123)
# Simulate percentage of votes received in each state by the Democratic, Republic and other parties
votes_data <- votes_data %>%
mutate('Democratic' = round(runif(50, 1, 100)),
'Republic' = round(runif(50, 1, (100 - Democratic))),
'Other' = 100 - Democratic - Republic)
# Add the latitude and longitude of the geographical centers of the states to place the pies
votes_data <- votes_data %>%
mutate('pie_lat' = state.center$y,
'pie_long' = state.center$x)
# Filter out any states that weren't present in the map_data
votes_data <- votes_data %>% filter(State %in% unique(states_boundaries$region))
states_boundaries <- map_data("state")
set.seed(123)
# Get names of state names from map data
votes_data <- data.frame('State' = tolower(state.name))
# Simulate percentage of votes received in each state by the Democratic, Republic and other parties
votes_data <- votes_data %>%
mutate('Democratic' = round(runif(50, 1, 100)),
'Republic' = round(runif(50, 1, (100 - Democratic))),
'Other' = 100 - Democratic - Republic)
# Add the latitude and longitude of the geographical centers of the states to place the pies
votes_data <- votes_data %>%
mutate('pie_lat' = state.center$y,
'pie_long' = state.center$x)
# Filter out any states that weren't present in the map_data
votes_data <- votes_data %>% filter(State %in% unique(states_boundaries$region))
map <- ggplot(states_boundaries, aes(x = long, y = lat)) +
# Add states and their borders
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
# Axis titles
labs(x = 'Longitude', y ='Latitude')+
# Blue background for the sea behind
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
# Coordinate system for maps
coord_map()
map
plot <- map +
# Add pie-charts for each state
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = votes_data, colour = 'black',
slices = c('Democratic','Republic','Other'))+
# Colours of the pie sectors
scale_fill_manual(values = c('#047db7','#c52d25', 'grey'), name = 'Party')+
# Place legend on top of the plot
theme(legend.position = 'top')
plot
plot +
# Different map projection
coord_sf('albers', lat0 = 45.5, lat1 = 29.5)
plot +
# Different map projection
coord_sf(crs = 9822)
plot +
# Different map projection
coord_map('albers', lat0 = 45.5, lat1 = 29.5)
remove.packages('ranger')
install.packages('ranger')
?out.height
??out.height
library(PieGlyph)
library(PieGlyph)
