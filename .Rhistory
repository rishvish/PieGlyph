use_r('geom_pie_glyph')
check()
create_package('D:\\Phd\\Phd Work\\R packages\\PieGlyph')
library(PieGlyph)
?geom_pie_glyph
library(devtools)
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
build_readme()
library(devtools)
data(sim1)
sim1$Evenness <- DI_data_E_AV(prop = 3:6, data = sim1)$E
library(PieGlyph)
?geom_pie_glyph
run_examples()
run_examples()
run_examples()
run_examples()
run_examples()
run_examples()
run_examples()
run_examples()
run_examples()
?scale_radius
library(PieGlyph)
?scale_radius
?scale_radius_manual
?scale_size_manual
?scale_size_discrete
?scale_radius
?scale_size
?scale_radius
?scale_radius_discrete
library(PieGlyph)
library(PieGlyph)
?scale_radius_discrete
?scale_radius
?scale_radius_manual
?geom_pie_glyph
library(PieGlyph)
?geom_arx_Bar
?geom_arc_bar
?ggforce::geom_arc_bar
?geom_pie_glyph
??geom_pie_glyph
?geom_point()
?geom_boxplot()
?geom_point()
?geom_boxplot()
?ggforce::geom_arc_bar
?scatterpie::geom_scatterpie
?geom_point()
?scale_area_continuous
??scale_area_continuous
??scale_size_continuous
?scale_size_continuous
?geom_point()
library(PieGlyph)
data(sim1)
library(tidyverse)
library(DImodels)
data(sim1)
plot_data <- sim1 %>% filter(block == 1) %>% rbind(c(16, 1, 2,3,4, NA, 10))
ggplot(data = sim1 %>% filter(block == 1))+
PieGlyph::geom_pie_glyph(aes(x = community, y = response), categories = paste0('p',1:4), data = plot_data, colour = 'black')
library(PieGlyph)
ggplot(data = sim1 %>% filter(block == 1))+
PieGlyph::geom_pie_glyph(aes(x = community, y = response), categories = paste0('p',1:4), data = plot_data, colour = 'black')
library(PieGlyph)
library(PieGlyph)
?geom_pie_glyph
library(PieGlyph)
library(PieGlyph)
library(PieGlyph)
library(PieGlyph)
library(PieGlyph)
library(PieGlyph)
ggplot(data = sim1 %>% filter(block == 1))+
PieGlyph::geom_pie_glyph(aes(x = community, y = response), categories = paste0('p',1:4), data = plot_data, colour = 'black')
ggplot(data = sim1 %>% filter(block == 1))+
PieGlyph::geom_pie_glyph(aes(x = community, y = response), categories = paste0('p',1:4), data = sim1 %>% filter(block == 1), colour = 'black')
ggplot(data = sim1 %>% filter(block == 1))+
PieGlyph::geom_pie_glyph(aes(x = community, y = response), categories = paste0('p',1:4), data = sim1 %>% filter(block == 1), colour = 'blue')
ggplot(data = sim1 %>% filter(block == 1))+
PieGlyph::geom_pie_glyph(aes(x = community, y = response), categories = paste0('p',1:4), data = sim1 %>% filter(block == 1), colour = 'NA')
states <- map_data("state")
## Data showing counts of arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973
arrests <- USArrests
## Data showing the geographical center of US states
centers <- state.center
## Add state centers to arrests data
arrests <- arrests %>% mutate(region = tolower(rownames(USArrests)),
pie_lat = centers$y,
pie_long = centers$x)
## Merge map data with arrests data to get coordinates to place pie glyphs
choro <- merge(states, arrests, sort = FALSE, by = "region")
pie_data <- choro %>% group_by(region) %>% slice(1) %>%
select(region, pie_lat, pie_long,
Murder, Assault, Rape)
## Create plot (Can also create without stacking the category values together)
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 1, colour = 'black', alpha = 0.7)+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 1, colour = 'black', alpha = 0.7)+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 1, colour = 'black', alpha = 0.7)+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 1, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 1, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
.pt
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 0.1, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 0.25, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot2::draw_key_polygon
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 0.25, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
#' Key for Pie Glyphs
#' @description Controls the aesthetics of the legend entries for the pie glyphs
#' @inheritParams ggplot2::draw_key
#'
#' @return A grid grob
#' @seealso \code{\link[ggplot2:draw_key]{draw_key}}
#' @export
draw_key_pie <- function (data, params, size) {
`%||%` <- function (a, b)
{
if (is.null(a) || is.na(a)) b else a
}
if (is.null(data$size)) {
data$size <- 0.5
}
lwd <- min(data$size, min(size)/4)
radius <- data$radius*2
if(names(data)[1] == 'radius'){
data$shape <- 19
pointsGrob(0.5, 0.5,
pch = data$shape,
gp = gpar(col = alpha(data$colour %||% "black", data$alpha),
fill = alpha(data$fill %||% "black", data$alpha),
fontsize = (radius %||% 1.5) * .pt + (data$stroke %||% 0.5) * .stroke/2,
lwd = (data$stroke %||% 0.5) * .stroke/2),
vp = viewport(clip = "on"))
} else {
rectGrob(width = unit(1, "npc") - unit(lwd, "mm"),
height = unit(1, "npc") - unit(lwd, "mm"),
gp = gpar(col = data$colour %||%  NA,
fill = alpha(data$fill %||% "grey20", data$alpha),
lty = data$linetype %||% 1,
lwd = (data$size/3 %||% 0.5) * .pt,
linejoin = params$linejoin %||% "mitre",
lineend = if (identical(params$linejoin, "round")) "round" else "square"),
vp = viewport(clip = "on"))
}
}
GeomPieGlyph <- ggproto('GeomPieGlyph', Geom,
required_aes = c('x', 'y'),
default_aes = list(
colour = NA, radius = 0.5, size = 1, linetype = 1, alpha = 1, categories = NA, values = NA, fill = NA
),
draw_key = draw_key_pie,
setup_data = function(data, params){
# If an explicit group wasn't specified, group data by each pie glyph
if(all(data$group == 1)){
nCat <- length(unique(data[, 'categories']))
data$group <- rep(1:(nrow(data)/nCat), each = nCat)
}
data$warn <- !params$na.rm
data
},
draw_panel = function(data, panel_scales, coord) {
## Transform the data first
coords <- coord$transform(data, panel_scales)
categories <- unique(data[, 'categories'])
nCat <- length(categories)
coords <- coords %>%
mutate(pie_group = rep(1:(nrow(coords)/nCat), each = nCat)) %>%
group_by(pie_group) %>%
mutate(ID = factor(paste(values, collapse = '_'))) %>%
mutate(ID = (as.numeric(ID))) %>% ungroup()
# Check for any missing values of categories in the data
if(nrow(coords %>% group_by(pie_group) %>% filter(all(is.na(values)))) != 0){
if((coords$warn)[1]){
warning('There were observations with all categories being NAs, those observations have been removed from the data.')
}
coords <- coords %>%
group_by(pie_group) %>%
filter(any(!is.na(values))) %>%
ungroup()
}
if(any(is.na(coords$values))){
if((coords$warn)[1]){
warning('There were observations with some categories being NA, they have been replaced with 0.')
}
coords <- coords %>% mutate(values = ifelse(is.na(values), 0, values))
}
# Construct pies for the unique communities in the data
pies <- get_pies(data = coords)
#my_pies <<- pies
# List of all pies
grobs <- coords %>%
group_by(pie_group) %>%
group_map(~pie_aes(., pies))
# group all the pie grobs into a single grobTree object and plot
obj <- do.call(grid::grobTree, grobs)
})
#'    pivot_longer(cols = c('a','b','c','d'), names_to = 'Marker',
#'                 values_to = 'Proportion')
#'
#' ## Create lollipop plot
#' ggplot(data = plot_data, aes(x = n, y = prediction, fill = Marker))+
#'   geom_segment(aes(yend = 0, xend = n))+
#'   geom_pie_glyph(categories = 'Marker', values = 'Proportion',
#'                  radius = 0.75, colour = 'black')+
#'   labs(y = 'Prob(Having Disease)', x = 'Case')+
#'   theme_minimal()
geom_pie_glyph <- function(mapping = NULL, data = NULL, categories, values = NA,
stat = "identity", position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
if (is.null(mapping))
mapping <- ggplot2::aes_()
# For situations when the data is wide format instead of long
if (length(categories)> 1){
if (is.null(data)){
stop('Need to specify data in layer if data is not in long format')
}
if (is.numeric(categories)){
categories <- colnames(data)[categories]
}
data <- data %>% tidyr::pivot_longer(cols = categories, names_to = 'Categories', values_to = 'Values')
values <- 'Values'
categories <- 'Categories'
}
if (length(categories) == 1){
if(is.na(values)){
stop('Specify column with category values if data is in long format.')
}
}
if(is.null(mapping[['group']])){
mapping <- utils::modifyList(mapping,
ggplot2::aes_(group = 1))
}
mapping <- utils::modifyList(mapping,
ggplot2::aes_(fill = as.formula(paste0("~", categories)),
values = as.formula(paste0("~", values)),
categories = as.formula(paste0("~", categories)))
)
ggplot2::layer(
data = data, mapping = mapping, stat = 'identity', geom = GeomPieGlyph,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
# Function to get pie glyphs for unique communities in data
get_pies <- function(data){
# Get unique communities in the data
comms <- data %>%
dplyr::distinct(categories, values, ID)
# For mapping the pies to each community in the data
IDs <- as.character(unique(comms$ID))
pie_grobs <- comms %>% group_by(ID) %>% group_map(~get_pie(.))
names(pie_grobs) <- IDs
return(pie_grobs)
}
# Function to create the individual pies using geom_arc_bar
get_pie <- function(data){
# Code from geom_arc_bar in ggforce
# This will accruately create the wedges of the pies
angles <- cumsum(data$values)
sep <- 0.000001
seps <- cumsum(sep * seq_along(angles))
angles <- angles / max(angles) * (2 * pi - max(seps))
start = c(0, angles[-length(angles)]) + c(0, seps[-length(seps)]) + sep / 2
end = angles + seps - sep / 2
end[start == end] = end[start == end] + sep
data <- data %>% mutate(start = start, end = end)
ggplotGrob(
ggplot(data = data) +
geom_arc_bar(aes(x0 =1, y0=1, r0 =0, r =1, start = start, end = end, fill = categories), colour = NA, show.legend = F)+
theme_void()
) %>% return()
}
# Function to adjust the aesthetics while plotting the individual pies
#' @usage NULL
pie_aes <- function(point, pies) {
pie.grob <- grid::grobTree(
pies[[unique(point$ID)]],
vp = viewport(), gp = gpar())
# Radius of pies
radius <-  point[['radius']]
# Fill and border colour
pie.grob$children$layout$grobs[[5]]$children[[3]]$gp$col <- point[['colour']]
pie.grob$children$layout$grobs[[5]]$children[[3]]$gp$fill <- unlist(point[['fill']])
# Aesthetics for pies
pie.grob$children$layout$grobs[[5]]$children[[3]]$gp$alpha  <- point[['alpha']]
pie.grob$children$layout$grobs[[5]]$children[[3]]$gp$lty <- point[['linetype']]
pie.grob$children$layout$grobs[[5]]$children[[3]]$gp$lwd <- point[['size']]
# Position and radius of the pies
pie.grob$vp$x      <- unit(point[['x']], 'npc')
pie.grob$vp$y      <- unit(point[['y']], 'npc')
pie.grob$vp$width  <- unit(radius, 'cm')
pie.grob$vp$height <- unit(radius, 'cm')
pie.grob
}
#' Key for Pie Glyphs
#' @description Controls the aesthetics of the legend entries for the pie glyphs
#' @inheritParams ggplot2::draw_key
#'
#' @return A grid grob
#' @seealso \code{\link[ggplot2:draw_key]{draw_key}}
#' @export
draw_key_pie <- function (data, params, size) {
`%||%` <- function (a, b)
{
if (is.null(a) || is.na(a)) b else a
}
if (is.null(data$size)) {
data$size <- 0.5
}
lwd <- min(data$size, min(size)/4)
radius <- data$radius*2
if(names(data)[1] == 'radius'){
data$shape <- 19
pointsGrob(0.5, 0.5,
pch = data$shape,
gp = gpar(col = alpha(data$colour %||% "black", data$alpha),
fill = alpha(data$fill %||% "black", data$alpha),
fontsize = (radius %||% 1.5) * .pt + (data$stroke %||% 0.5) * .stroke/2,
lwd = (data$stroke %||% 0.5) * .stroke/2),
vp = viewport(clip = "on"))
} else {
print(data)
rectGrob(width = unit(1, "npc") - unit(lwd, "mm"),
height = unit(1, "npc") - unit(lwd, "mm"),
gp = gpar(col = data$colour %||%  NA,
fill = alpha(data$fill %||% "grey20", data$alpha),
lty = data$linetype %||% 1,
lwd = (data$size/3 %||% 0.5) * .pt,
linejoin = params$linejoin %||% "mitre",
lineend = if (identical(params$linejoin, "round")) "round" else "square"),
vp = viewport(clip = "on"))
}
}
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 0.25, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
library(ggforce)
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 0.25, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
library(grid)
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 0.25, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
ggplot(states, aes(x = long, y = lat)) +
geom_polygon(aes(group = group),
fill = 'darkseagreen', colour = 'black')+
geom_pie_glyph(aes(y = pie_lat, x = pie_long),
data = pie_data, categories = 4:6,         # Can also specify categories as column numbers
radius = 1, colour = 'black')+
coord_map("albers",  lat0 = 45.5, lat1 = 29.5)+
labs(x = 'Longitude', y ='Latitude')+
theme(panel.background = element_rect(fill = 'lightsteelblue2'))+
scale_fill_brewer(palette = 'Dark2')
library(PieGlyph)
SerumProtein
?geom_point
?geom_line
?geom_boxplot
?geom_pie_glyph
?geom_pie_glyph
?geom_pie_glyph
library(PieGlyph)
?DImodels
library(PieGlyph)
?geom_pie_glyph
?scatterpie
library(scatterpie)
?scatterpie
?ggforce
?ggforce
?DImodels
?scatterpie
?ggforce
?ggplot
?ggplot2
?ggplot2
library(PieGlyph)
?PieGlyph
library(PieGlyph)
?PieGlyph
library(PieGlyph)
?PieGlyph
library(PieGlyph)
?PieGlyph
library(PieGlyph)
?PieGlyph
?ggplot2
library(PieGlyph)
library(PieGlyph)
?PieGlyph
library(PieGlyph)
library(PieGlyph)
?PieGlyph
?geom_pie_glyph
library(PieGlyph)
?PieGlyph
library(PieGlyph)
?PieGlyph
library(PieGlyph)
library(PieGlyph)
?PieGlyph
