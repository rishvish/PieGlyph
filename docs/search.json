[{"path":"/articles/compositions-example.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Compositional data example","text":"","code":"library(PieGlyph) library(tidyverse) library(DImodels) library(metR) library(ggnewscale)"},{"path":"/articles/compositions-example.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Compositional data example","text":"using data DImodels package. package suitable modelling biodiversity ecosystem functioning (BEF) relationship using Diversity-Interactions (DI) modelling approach introduced Kirwan et al. (2009) doi:10.1890/08-1684.1. use sim4 dataset, simulated dataset showing value ecosystem function (assumed yield) ecosystem comprised three species plants. response shown vary proportions three species across simplex space. data consists 141 rows 9 columns. richness numeric variable indicating number species community can take integer value 1 6 (inclusive). p1, p2, p3, p4, p5, p6 columns showing initial proportions six species response simulated value ecosystem function. treatment assumed level fertilizer applied communities takes value either 50, 150 250. assumed six species experiment grouped depending function perform ecosystem, species 1 2 grouped functional group 1, species 3 4 functional group 2 species 5 6 functional group 3. simplify example focus communities receiving fertilizer treatment 150.","code":"data(sim4) raw_data <- sim4 %>% filter(treatment == 150)  head(raw_data) ##   richness treatment p1 p2 p3 p4 p5 p6 response ## 1        1       150  1  0  0  0  0  0   31.178 ## 2        1       150  1  0  0  0  0  0   28.986 ## 3        1       150  1  0  0  0  0  0   27.705 ## 4        1       150  0  1  0  0  0  0   19.540 ## 5        1       150  0  1  0  0  0  0   20.290 ## 6        1       150  0  1  0  0  0  0   20.305"},{"path":"/articles/compositions-example.html","id":"pie-scatter-plot","dir":"Articles","previous_headings":"","what":"Pie-scatter plot","title":"Compositional data example","text":"can visualise raw data scatterplot response vs community, point pie-chart showing proportions three species.  plot indicates average increase richness community, response tends increase. possible reason richness increase, species interact results positive effect response. also seem variation response within given richness level, can attributed species composition species-specific effects. can verify observations fitting regression model expresses response combination species-specific effect species interactions. use DI() function DImodels package fit model. DI() function allows us specify structure interaction species. assume single common average interaction species fit model. Note: Since regression model can also fit model using regular glm() function. However require us manually calculate interaction terms, DI() function automatically us. model summary shows species-specific effects well average interaction effect significant. fitting model, natural question arises next ‘combination species gives best performance?’. Another question interest , ‘high performance stable large range communities restricted small set communities?’. make predictions model different communities across simplex space filter best performing community. answering question stability difficult. visualisation shows , best performing community well stability across simplex space really helpful. six species example spread across 6-d simplex, unfortunately difficult visualise anything 4-d simplex. However, visualise three functional groups species, instead individual proportions. three functional groups spread across 3-d simplex space can visualised neatly ternary diagram. can thought version dimension reduction species level information combined embedded within functional groups level. reduces dimensionality data, enabling us effectively visualise .","code":"ggplot()+   # Pie-charts    geom_pie_glyph(aes(x = richness, y = response),                  categories = c('p1','p2','p3','p4','p5','p6'),                  colour = 'black', data = raw_data)+   # Axis and legend titles   labs(x = 'Richness', y = 'Response', fill = 'Species')+   # Colours for segments of the pie-chart   scale_fill_manual(values = c('#8ecdf0', '#156c9e','#ffb880','#b34f00','#dca3c2','#81315e'))+   theme_minimal() # The parameters of the function are as follows: # y: name of column containing the response variable # DImodel: Structure of the interaction (average in this case) # prop: columns containing the six species proportions # data: data used to fit the model m1 <- DI(y = 'response', DImodel = 'AV',          prop = c('p1','p2','p3','p4','p5','p6'),          data = raw_data) ## Fitted model: Average interactions 'AV' DImodel summary(m1) ##  ## Call: ## glm(formula = fmla, family = family, data = data) ##  ## Deviance Residuals:  ##     Min       1Q   Median       3Q      Max   ## -5.8627  -1.1832   0.1411   1.3792   5.6205   ##  ## Coefficients: ##    Estimate Std. Error t value Pr(>|t|)     ## p1   30.298      1.319  22.972  < 2e-16 *** ## p2   19.974      1.319  15.144  < 2e-16 *** ## p3   22.381      1.319  16.969  < 2e-16 *** ## p4   24.519      1.319  18.590  < 2e-16 *** ## p5   13.155      1.319   9.974 2.08e-12 *** ## p6   15.240      1.319  11.555 2.55e-14 *** ## AV   23.068      2.509   9.193 2.06e-11 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## (Dispersion parameter for gaussian family taken to be 7.08006) ##  ##     Null deviance: 31659.3  on 47  degrees of freedom ## Residual deviance:   283.2  on 40  degrees of freedom ## AIC: 233.79 ##  ## Number of Fisher Scoring iterations: 2"},{"path":"/articles/compositions-example.html","id":"visualising-model-predictions","dir":"Articles","previous_headings":"","what":"Visualising model predictions","title":"Compositional data example","text":"p1, p2, p3, p4, p5, p6 columns showing proportions six species. FG1 (FG1 = p1 + p2), FG2 (FG2 = p3 + p4), FG3(FG3 = p5 + p6) represent proportions three functional groups. pred predicted response community. base high 2-d mappings 3-d simplex space visualising 3-d simplex 2 dimensions.","code":"# Create grid of points across 2-d space tern_data <- expand.grid(base=seq(0,1,l=100*2),                          high=seq(0,sin(pi/3),l=87*2*3))  # Filter out points which belong within the 3-d ternary tern_data <- tern_data %>%                  filter(high < (base*sin(pi/3)*2),                        high < ((1-base)*sin(pi/3)*2))  # Map the 2-d points to 3-d ternary points and get species proportions tern_data <- tern_data %>%                  mutate(FG2 = high*2/sqrt(3),                        FG3 = base - high/sqrt(3),                        FG1 = 1 - FG2 - FG3,                        p1 = FG1/2,                        p2 = FG1/2,                        p3 = FG2/2,                        p4 = FG2/2,                        p5 = FG3/2,                        p6 = FG3/2) %>%                  mutate(pred = predict(m1, newdata = .)) head(tern_data) ##          base high FG2         FG3       FG1        p1        p2 p3 p4 ## 1 0.005025126    0   0 0.005025126 0.9949749 0.4974874 0.4974874  0  0 ## 2 0.010050251    0   0 0.010050251 0.9899497 0.4949749 0.4949749  0  0 ## 3 0.015075377    0   0 0.015075377 0.9849246 0.4924623 0.4924623  0  0 ## 4 0.020100503    0   0 0.020100503 0.9798995 0.4899497 0.4899497  0  0 ## 5 0.025125628    0   0 0.025125628 0.9748744 0.4874372 0.4874372  0  0 ## 6 0.030150754    0   0 0.030150754 0.9698492 0.4849246 0.4849246  0  0 ##            p5          p6     pred ## 1 0.002512563 0.002512563 30.90583 ## 2 0.005025126 0.005025126 30.90795 ## 3 0.007537688 0.007537688 30.90948 ## 4 0.010050251 0.010050251 30.91043 ## 5 0.012562814 0.012562814 30.91080 ## 6 0.015075377 0.015075377 30.91059"},{"path":"/articles/compositions-example.html","id":"ternary-diagram-with-predictions-across-the-3-d-simplex","dir":"Articles","previous_headings":"Visualising model predictions","what":"Ternary diagram with predictions across the 3-d simplex","title":"Compositional data example","text":"figure shows contour map expected performance communities across 3-d simplex three functional groups. evident high performance stable across wide range communities.","code":"# breaks for contour plot breaks <-  round(seq(min(tern_data$pred), max(tern_data$pred), length.out = 8), 1)  tern_plot <- ggplot(data = tern_data,                      aes(x = base, y = high, fill = pred, z = pred))+       # Tiling the ternary space        geom_raster()+       # Add contour lines       geom_contour(colour = 'black', breaks = breaks)+       # Add labels on the contour lines       geom_text_contour(skip=0, breaks = breaks,                          label.placer = label_placer_fraction(0.5),                         size=4, nudge_x = -0.02)+       # Add borders around the ternary       geom_segment(data = data.frame(x = c(0, 0, 1),                                       y = c(0, 0, 0),                                       xend = c(1, 0.5, 0.5),                                       yend = c(0, sqrt(3)/2, sqrt(3)/2),                                       pred = 0),                  aes(x = x, y = y, xend=xend, yend=yend),                  size=1)+       # Add labels for the ternary        geom_text(data = data.frame(base = c(0, 0.5, 1),                                   high = c(0, sqrt(3)/2, 0),                                   label = c('FG1', 'FG2', 'FG3'),                                   pred = 0),                aes(label=label), size=5, fontface='bold',                nudge_x = c(-0.05, 0, 0.05), nudge_y = c(0, 0.05, 0))+       # Choose colours for the different regions in the contour       scale_fill_stepsn(colours = terrain.colors(n = 8, rev = T),                         breaks = breaks,                         limits = c(breaks[1], breaks[8]))+       # Make legend continous instead of categorical       guides(fill = guide_bins(frame.colour = 'black',                                 ticks.colour = 'black',                                 title = 'Prediction',                                 show.limits = T))+       # Get rid of original plot axes       theme_void()+       # Adjust legend position and size       theme(legend.position = 'bottom',             legend.key.size = unit(0.075, 'npc'),             legend.key.height = unit(0.04, 'npc'),             legend.title = element_text(face='bold',                                         size = 12, vjust = 1)) tern_plot"},{"path":"/articles/compositions-example.html","id":"overlay-ternary-with-pie-charts","dir":"Articles","previous_headings":"Visualising model predictions","what":"Overlay ternary with pie-charts","title":"Compositional data example","text":"order identify best performing community can now overlay ternary diagram pie-charts showing proportions best performing community.  shows best performing community community consists species p1,p2,p3, p4 roughly equal proportions. Thus even though visualisation functional group level (linear combination species), can get species-level information using pie-charts. can also add pie-charts representing specific communities whose performance might interested monitor.  idea can also generalized situations compositional data, reduce dimensionality data taking linear combinations certain variables visualise linear combinations get general idea data. overlay plot pie-charts specific locations get information original dimensions data. help us reduce tradeoff dimensionality reduction axis-interpretablity visualise high dimensional data effectively.","code":"# Get the best performing community  best_com <- tern_data %>% filter(pred == max(pred))  tern_plot +     # Add a new scale for colour the species proportions     ggnewscale::new_scale_fill()+     # Add a pie-chart for the selected communities     geom_pie_glyph(data = best_com, radius = 0.75,                    categories = c('p1','p2','p3','p4','p5','p6'),                     colour = 'black', alpha = .95)+     # Colour the sectors of the pies     scale_fill_manual(values = c('#8ecdf0','#156c9e',                                 '#ffb880','#b34f00',                                 '#dca3c2','#81315e'),                       name = 'Species') +     # Adjust the legend of the species colours     guides(fill = guide_legend(nrow = 3, byrow = T)) # Select a random subset of communities  set.seed(98765) com_interest <- tern_data %>%                    slice(round(runif(6, 1, nrow(.))))  tern_plot +     # Add a new scale for colour the species proportions     ggnewscale::new_scale_fill()+     # Add a pie-chart for the selected communities     geom_pie_glyph(data = com_interest, radius = 0.75,                     categories = c('p1','p2','p3','p4','p5','p6'),                     colour = 'black', alpha = .95)+     # Colour the sectors of the pies     scale_fill_manual(values = c('#8ecdf0', '#156c9e',                                  '#ffb880','#b34f00',                                  '#dca3c2','#81315e'),                       name = 'Species') +     # Adjust legend of species colours     guides(fill = guide_legend(nrow = 3, byrow = T))"},{"path":"/articles/pie-lollipop-example.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Pie-chart lollipop plots","text":"","code":"library(PieGlyph) library(tidyverse)"},{"path":"/articles/pie-lollipop-example.html","id":"simulate-fake-data","dir":"Articles","previous_headings":"","what":"Simulate fake data","title":"Pie-chart lollipop plots","text":"data contains proportions four protein markers blood 20 different patients. ID unique identifier patients columns , B, C, D describe scores patient across four markers disease describes whether patient disease","code":"model_data <- data.frame('ID' = paste0('P', 1:20),                          'A' = c(90, 60, 30, 75, 85,                                   30, 50, 70, 65, 65,                                   40, 115, 165, 40, 175,                                   200, 185, 250, 190, 175),                          'B' = c(170, 180, 130, 325, 180,                                  220, 335, 285, 85, 125,                                  250, 190, 60, 205, 125,                                   90, 95, 25, 60, 20),                          'C' = c(60, 35, 95, 50, 15,                                   190, 15, 80, 310, 280,                                   185, 115, 220, 190, 155,                                   135, 180, 120, 100, 140),                          'D' = c(180, 225, 245, 50, 220,                                   60, 100, 65, 40, 30,                                   25, 80, 55, 65, 45,                                  75, 30, 105, 150, 165),                          'Disease' = factor(c(rep(c('Yes'), 10),                                               rep(c('No'), 10)))) head(model_data) #>   ID  A   B   C   D Disease #> 1 P1 90 170  60 180     Yes #> 2 P2 60 180  35 225     Yes #> 3 P3 30 130  95 245     Yes #> 4 P4 75 325  50  50     Yes #> 5 P5 85 180  15 220     Yes #> 6 P6 30 220 190  60     Yes"},{"path":"/articles/pie-lollipop-example.html","id":"fit-regression-model","dir":"Articles","previous_headings":"","what":"Fit regression model","title":"Pie-chart lollipop plots","text":"fit logistic regression model using four protein markers predictors probability disease model summary shows marker significant predicting probability disease.","code":"m1 <- glm(Disease ~ A + B + C + D + 0,           data = model_data,           family = binomial(link = 'logit')) summary(m1) #>  #> Call: #> glm(formula = Disease ~ A + B + C + D + 0, family = binomial(link = \"logit\"),  #>     data = model_data) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.95542  -0.26818   0.00974   0.49409   1.18935   #>  #> Coefficients: #>    Estimate Std. Error z value Pr(>|z|)   #> A -0.035561   0.018041  -1.971   0.0487 * #> B  0.005089   0.004897   1.039   0.2987   #> C  0.003451   0.005785   0.597   0.5508   #> D  0.022697   0.015913   1.426   0.1538   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 27.726  on 20  degrees of freedom #> Residual deviance: 13.221  on 16  degrees of freedom #> AIC: 21.221 #>  #> Number of Fisher Scoring iterations: 6"},{"path":"/articles/pie-lollipop-example.html","id":"model-predictions","dir":"Articles","previous_headings":"","what":"Model predictions","title":"Pie-chart lollipop plots","text":"can now predict probability patient disease give scores four protein markers. making predictions, data sorted descending order probability disease. marker columns stacked together one column.","code":"plot_data <- model_data %>%   # Add predictions   mutate('prediction' = predict(m1, type = 'response')) %>%   # Sort in descending order of prediction   arrange(desc(prediction)) %>%    # Relevel ID for plotting in descending order   mutate(ID = fct_inorder(ID)) %>%    # Stack the four markers in one column   pivot_longer(cols = c('A', 'B', 'C','D'), names_to = 'Marker',                values_to = 'Proportion')  head(plot_data, 8) #> # A tibble: 8 × 5 #>   ID    Disease prediction Marker Proportion #>   <fct> <fct>        <dbl> <chr>       <dbl> #> 1 P3    Yes          0.996 A              30 #> 2 P3    Yes          0.996 B             130 #> 3 P3    Yes          0.996 C              95 #> 4 P3    Yes          0.996 D             245 #> 5 P2    Yes          0.982 A              60 #> 6 P2    Yes          0.982 B             180 #> 7 P2    Yes          0.982 C              35 #> 8 P2    Yes          0.982 D             225"},{"path":"/articles/pie-lollipop-example.html","id":"bar-plot","dir":"Articles","previous_headings":"","what":"Bar plot","title":"Pie-chart lollipop plots","text":"probability patient sample disease can visualised bar chart follows.","code":"ggplot(data = plot_data)+   geom_col(aes(x = ID, y = prediction))+   # Add axis titles   labs(y = 'Prob(Having Disease)', x = 'Patient')+   # Values to show on y-axis   scale_y_continuous(labels = c(0, 0.25, 0.5, 0.75, 1))+   theme_minimal()"},{"path":"/articles/pie-lollipop-example.html","id":"lollipop-plot-with-pie-charts","dir":"Articles","previous_headings":"","what":"Lollipop plot with pie-charts","title":"Pie-chart lollipop plots","text":"bar plot useful example gives probability disease gives information model predictors (scores protein markers case). can improve plot converting lollipop plot centre lollipop shows proportions four protein markers. enables us view , response well predictors model simultaneously.","code":"ggplot(data = plot_data, aes(x = ID, y = prediction, fill = Marker))+   # Vertical line of lollipop   geom_segment(aes(yend = 0, xend = ID))+   # Pies-charts at the centre of the lollipop   geom_pie_glyph(categories = 'Marker', values = 'Proportion',                  radius = 0.6, colour = 'black')+   # Axis titles   labs(y = 'Prob(Having Disease)', x = 'Patient')+   # Colours for sectors of the pie-chart   scale_fill_manual(values = c('#56B4E9','#F0E442',                                '#D55E00','#CC79A7'))+   theme_minimal()"},{"path":[]},{"path":"/articles/PieGlyph.html","id":"load-libraries","dir":"Articles","previous_headings":"Examples","what":"Load libraries","title":"PieGlyph","text":"","code":"library(tidyverse) library(PieGlyph)"},{"path":"/articles/PieGlyph.html","id":"simulate-raw-data","dir":"Articles","previous_headings":"Examples","what":"Simulate raw data","title":"PieGlyph","text":"data 30 observations seven columns. response continuous variable measuring system output system describes 30 individual systems interest. system placed one three groups shown group. Columns , B, C, D measure system attributes.","code":"set.seed(123) plot_data <- data.frame(response = rnorm(30, 100, 30),                         system = 1:30,                         group = sample(size = 30, x = c('G1', 'G2', 'G3'), replace = T),                         A = round(runif(30, 3, 9), 2),                         B = round(runif(30, 1, 5), 2),                         C = round(runif(30, 3, 7), 2),                         D = round(runif(30, 1, 9), 2)) head(plot_data) #>    response system group    A    B    C    D #> 1  83.18573      1    G1 5.80 1.57 4.78 8.31 #> 2  93.09468      2    G3 6.07 3.76 3.87 8.21 #> 3 146.76125      3    G1 6.60 3.48 5.01 3.19 #> 4 102.11525      4    G2 5.00 4.57 4.42 3.57 #> 5 103.87863      5    G1 5.93 3.69 5.60 8.89 #> 6 151.45195      6    G1 8.73 3.95 4.50 5.96"},{"path":"/articles/PieGlyph.html","id":"create-scatter-plot-with-pie-charts","dir":"Articles","previous_headings":"Examples","what":"Create scatter plot with pie-charts","title":"PieGlyph","text":"can plot outputs system scatterplot replace points pie-chart glyphs showing relative proportions four system attributes","code":""},{"path":"/articles/PieGlyph.html","id":"basic-plot","dir":"Articles","previous_headings":"Examples","what":"Basic plot","title":"PieGlyph","text":"","code":"ggplot(data = plot_data, aes(x = system, y = response))+   geom_pie_glyph(categories = c('A', 'B', 'C', 'D'), data = plot_data)+   theme_minimal()"},{"path":"/articles/PieGlyph.html","id":"change-pie-radius-and-border-colour","dir":"Articles","previous_headings":"Examples","what":"Change pie radius and border colour","title":"PieGlyph","text":"","code":"ggplot(data = plot_data, aes(x = system, y = response))+   # Can also specify categories as column indices   geom_pie_glyph(categories = 4:7, data = plot_data, colour = 'black', radius = 1)+    theme_minimal()"},{"path":"/articles/PieGlyph.html","id":"map-size-to-a-variable","dir":"Articles","previous_headings":"Examples","what":"Map size to a variable","title":"PieGlyph","text":"","code":"p <- ggplot(data = plot_data, aes(x = system, y = response))+         geom_pie_glyph(aes(radius = group),                         categories = c('A', 'B', 'C', 'D'),                         data = plot_data, colour = 'black')+         theme_minimal() p"},{"path":"/articles/PieGlyph.html","id":"adjust-radius-for-groups","dir":"Articles","previous_headings":"Examples","what":"Adjust radius for groups","title":"PieGlyph","text":"","code":"p <- p + scale_radius_manual(values = c(0.5, 0.75, 1), unit = 'cm') p"},{"path":"/articles/PieGlyph.html","id":"add-custom-labels","dir":"Articles","previous_headings":"Examples","what":"Add custom labels","title":"PieGlyph","text":"","code":"p <- p + labs(x = 'System', y = 'Response', fill = 'Attributes', radius = 'Group') p"},{"path":"/articles/PieGlyph.html","id":"change-category-colours","dir":"Articles","previous_headings":"Examples","what":"Change category colours","title":"PieGlyph","text":"","code":"p + scale_fill_manual(values = c('#56B4E9', '#CC79A7', '#F0E442', '#D55E00'))"},{"path":"/articles/PieGlyph.html","id":"alternative-specification","dir":"Articles","previous_headings":"Examples","what":"Alternative specification","title":"PieGlyph","text":"attributes can also stacked one column generate plot. benefit don’t need specify data geom_pie_glyph function.","code":""},{"path":"/articles/PieGlyph.html","id":"stack-the-attributes-in-one-column","dir":"Articles","previous_headings":"Examples > Alternative specification","what":"Stack the attributes in one column","title":"PieGlyph","text":"","code":"plot_data_stacked <- plot_data %>% pivot_longer(cols = c('A','B','C','D'),                                                  names_to = 'Attributes',                                                  values_to = 'values') head(plot_data_stacked, 8) #> # A tibble: 8 × 5 #>   response system group Attributes values #>      <dbl>  <int> <chr> <chr>       <dbl> #> 1     83.2      1 G1    A            5.8  #> 2     83.2      1 G1    B            1.57 #> 3     83.2      1 G1    C            4.78 #> 4     83.2      1 G1    D            8.31 #> 5     93.1      2 G3    A            6.07 #> 6     93.1      2 G3    B            3.76 #> 7     93.1      2 G3    C            3.87 #> 8     93.1      2 G3    D            8.21"},{"path":"/articles/PieGlyph.html","id":"create-plot","dir":"Articles","previous_headings":"Examples > Alternative specification","what":"Create plot","title":"PieGlyph","text":"","code":"ggplot(data = plot_data_stacked, aes(x = system, y = response))+   # Along with categories column, values column is also needed now   geom_pie_glyph(categories = 'Attributes', values = 'values')+   theme_minimal()"},{"path":"/articles/spatial-example.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"Spatial data example","text":"","code":"library(scatterpie) library(PieGlyph) library(tidyverse)"},{"path":[]},{"path":"/articles/spatial-example.html","id":"load-map-data","dir":"Articles","previous_headings":"Create data","what":"Load Map data","title":"Spatial data example","text":"Load geographical information including latitude longitude states USA. dataset contains 15537 rows describing geographical boundaries state (except Alaska Hawaii) USA. long, lat region columns interest us. long lat describe longitude latitudes respectively boundaries states, region contains names state. Create fake elections results state states_boundaries data  dataset contains 48 rows describing percentage votes different parties got respective state. State describes state name, Democaratic, Republic describe percent votes parties got state. pie_lat pie_long describe geographical centre state (pie placed plot).","code":"states_boundaries <- map_data(\"state\") head(states_boundaries) #>        long      lat group order  region subregion #> 1 -87.46201 30.38968     1     1 alabama      <NA> #> 2 -87.48493 30.37249     1     2 alabama      <NA> #> 3 -87.52503 30.37249     1     3 alabama      <NA> #> 4 -87.53076 30.33239     1     4 alabama      <NA> #> 5 -87.57087 30.32665     1     5 alabama      <NA> #> 6 -87.58806 30.32665     1     6 alabama      <NA> set.seed(123)  # Get names of state names from map data votes_data <- data.frame('State' = tolower(state.name))  # Simulate percentage of votes received in each state by the Democratic, Republic and other parties votes_data <- votes_data %>%                  mutate('Democratic' = round(runif(50, 1, 100)),                        'Republic' = round(runif(50, 1, (100 - Democratic))),                        'Other' = 100 - Democratic - Republic)  # Add the latitude and longitude of the geographical centers of the states to place the pies  votes_data <- votes_data %>%                  mutate('pie_lat' = state.center$y,                        'pie_long' = state.center$x)  # Filter out any states that weren't present in the map_data votes_data <- votes_data %>% filter(State %in% unique(states_boundaries$region)) head(votes_data) #>         State Democratic Republic Other pie_lat  pie_long #> 1     alabama         29        4    67 32.5901  -86.7509 #> 2     arizona         41       47    12 34.2192 -111.6250 #> 3    arkansas         88        2    10 34.7336  -92.2992 #> 4  california         94        4     2 36.5341 -119.7730 #> 5    colorado          6       20    74 38.6777 -105.5130 #> 6 connecticut         53        7    40 41.5928  -72.3573"},{"path":[]},{"path":"/articles/spatial-example.html","id":"create-map","dir":"Articles","previous_headings":"Create plot","what":"Create map","title":"Spatial data example","text":"","code":"map <- ggplot(states_boundaries, aes(x = long, y = lat)) +         # Add states and their borders         geom_polygon(aes(group = group),                      fill = 'darkseagreen', colour = 'black')+         # Axis titles         labs(x = 'Longitude', y ='Latitude')+         # Blue background for the sea behind         theme(panel.background = element_rect(fill = 'lightsteelblue2'))+         # Coordinate system for maps         coord_map() map"},{"path":"/articles/spatial-example.html","id":"add-pie-charts-showing-proportion-of-votes-for-different-in-each-states","dir":"Articles","previous_headings":"Create plot","what":"Add pie charts showing proportion of votes for different in each states","title":"Spatial data example","text":"mentioned , works perfectly fine functions. However, still need use coord_fixed fix pie-charts. , user wishes use different map projection, pie-charts change dimensions depending projection   pie-charts created independent axes plot dimensions PieGlyph, unaffected change map projection","code":"map +    # Add pie-charts for each state   geom_scatterpie(aes(y = pie_lat, x = pie_long),                   data = votes_data,                   cols = c('Democratic','Republic','Other'))+   # Colours of the pie sectors   scale_fill_manual(values = c('#047db7','#c52d25', 'grey'), name = 'Party')+   # Fix aspect ratio of plot   coord_fixed() #> Coordinate system already present. Adding new coordinate system, which will replace the existing one. map +    # Add pie-charts for each state   geom_scatterpie(aes(y = pie_lat, x = pie_long),                   data = votes_data,                   cols = c('Democratic','Republic','Other'))+   # Colours of the pie sectors   scale_fill_manual(values = c('#047db7','#c52d25', 'grey'), name = 'Party')+   # Different map projection   coord_map(\"albers\", lat0 = 45.5, lat1 = 29.5) #> Coordinate system already present. Adding new coordinate system, which will replace the existing one. map +    # Add pie-charts for each state   geom_scatterpie(aes(y = pie_lat, x = pie_long),                   data = votes_data,                   cols = c('Democratic','Republic','Other'))+   # Colours of the pie sectors   scale_fill_manual(values = c('#047db7','#c52d25', 'grey'), name = 'Party')+   # Different map projection   coord_map(\"gnomonic\") #> Coordinate system already present. Adding new coordinate system, which will replace the existing one. map +    # Add pie-charts for each state   geom_pie_glyph(aes(y = pie_lat, x = pie_long),                  data = votes_data, colour = 'black',                  categories = c('Democratic','Republic','Other'))+   # Colours of the pie sectors   scale_fill_manual(values = c('#047db7','#c52d25', 'grey'), name = 'Party')+   # Different map projection   coord_map('albers', lat0 = 45.5, lat1 = 29.5) #> Coordinate system already present. Adding new coordinate system, which will replace the existing one. map +    # Add pie-charts for each state   geom_pie_glyph(aes(y = pie_lat, x = pie_long),                  data = votes_data, colour = 'black', radius = 0.5,                  categories = c('Democratic','Republic','Other'))+   # Colours of the pie sectors   scale_fill_manual(values = c('#047db7','#c52d25', 'grey'), name = 'Party')+   # Different map projection   coord_map('gnomonic') #> Coordinate system already present. Adding new coordinate system, which will replace the existing one."},{"path":"/articles/time-series-example.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load Packages","title":"Time-series example","text":"","code":"library(scatterpie) library(PieGlyph) library(tidyverse)"},{"path":"/articles/time-series-example.html","id":"simulate-data","dir":"Articles","previous_headings":"","what":"Simulate data","title":"Time-series example","text":"simulated data 60 rows 5 columns shows performance particular system 60 different time points. variable output contains system performance time measures different time points. variables , B, C measure attributes system time. attributes assumed related system performance change time. difficult visualise performance system time, whilst also showing evolution system attributes time using simple time series plot. However, replace points plot pie-charts can simulataneously visualise , performance system attributes time.","code":"plot_data <- data.frame(time = 1:60,                          output = rnorm(60, c(seq(300, 200, length.out = 20),                                               seq(200, 700, length.out = 20),                                              seq(700, 500, length.out = 20)), 100),                         A = seq(6, 3, length.out = 60),                         B = seq(4, 1, length.out = 60),                         C = seq(0, 6, length.out = 60)) head(plot_data) #>   time   output        A        B         C #> 1    1 228.9582 6.000000 4.000000 0.0000000 #> 2    2 313.6168 5.949153 3.949153 0.1016949 #> 3    3 266.7842 5.898305 3.898305 0.2033898 #> 4    4 210.1327 5.847458 3.847458 0.3050847 #> 5    5 358.7147 5.796610 3.796610 0.4067797 #> 6    6 257.5309 5.745763 3.745763 0.5084746"},{"path":"/articles/time-series-example.html","id":"create-plots","dir":"Articles","previous_headings":"","what":"Create Plots","title":"Time-series example","text":"expected, due plot dimensions, individual pies heavily squished difficult read proportions different attributes. common suggestion cases use function coord_equal(), forces plot width height equal causing pies represented circles. works fine cases, often aggravates problems renders plot uninterpretable shown .  Pie Glyph fixes problem creating pie charts independently plot axes thus plot dimensions effects pie charts  can adjust aesthetics choice plot using usual ggplot functions","code":"p <- ggplot(plot_data)+       geom_line(aes(x = time, y = output), size = 1)+       geom_scatterpie(aes(x = time, y = output),                       cols = LETTERS[1:3],                       data = plot_data,                       pie_scale = 3) p p + coord_equal() pl <- ggplot(plot_data)+         geom_line(aes(x = time, y = output), size = 1)+         geom_pie_glyph(aes(x = time, y = output),                        colour = 'black', categories = 3:5,                        data = plot_data, size = 0.75, radius = 0.5)+         theme_minimal() pl pl +    # Colours of the pie-sectors   scale_fill_manual(values = c('#56B4E9','#F0E442','#CC79A7'))+   # Axis and legend titles   labs(x = 'Time', y = 'System Performance', fill = 'Components')"},{"path":"/articles/unusual-situations.html","id":"load-library","dir":"Articles","previous_headings":"","what":"Load library","title":"Unusual situations","text":"","code":"library(PieGlyph) library(tidyverse) library(ggforce)"},{"path":"/articles/unusual-situations.html","id":"missing-values-for-a-particular-attribute","dir":"Articles","previous_headings":"","what":"Missing values for a particular attribute","title":"Unusual situations","text":"likely situation occur. data might missing (NA) values specific attributes observation. package handles situation replacing NA values 0 data. user notified via warning. warning can silenced specifying na.rm TRUE","code":"plot_data <- data.frame(x = 1:4,                          y = c(3,1,4,2),                         A = c(5, 2, NA, 3),                         B = c(NA, 2, 3, NA),                         C = c(7, NA, NA, 3)) head(plot_data) #>   x y  A  B  C #> 1 1 3  5 NA  7 #> 2 2 1  2  2 NA #> 3 3 4 NA  3 NA #> 4 4 2  3 NA  3 ggplot()+   geom_pie_glyph(aes(x = x, y = y),                  categories = c('A','B','C'),                  data = plot_data)"},{"path":"/articles/unusual-situations.html","id":"missing-values-for-all-attributes","dir":"Articles","previous_headings":"","what":"Missing values for all attributes","title":"Unusual situations","text":"situation occur observation missing values attributes. package handles situation dropping observation attributes missing. user notified via warning. warning can silenced specifying na.rm TRUE","code":"plot_data <- data.frame(x = 1:4,                          y = c(3,1,4,2),                         A = c(5, 2, NA, 1),                         B = c(2, 2, NA, 5),                         C = c(7, 3, NA, 3)) head(plot_data) #>   x y  A  B  C #> 1 1 3  5  2  7 #> 2 2 1  2  2  3 #> 3 3 4 NA NA NA #> 4 4 2  1  5  3 ggplot()+   geom_pie_glyph(aes(x = x, y = y),                  categories = c('A','B','C'),                  data = plot_data)"},{"path":"/articles/unusual-situations.html","id":"negative-values-for-attributes","dir":"Articles","previous_headings":"","what":"Negative values for attributes","title":"Unusual situations","text":"problem arises pie-charts distinguish positive negative values. causes unexpected behaviour might affect interpretation. Comparing figure fake data , can seen proportions shown plot, match values present data. Observations 1, 2, 4 negative values one category can seen pie-charts can’t account show one attribute. package handles situation notifying user negative values present data asking remove creating plot.","code":"plot_data <- data.frame(x = 1:4,                          y = c(3,1,4,2),                         A = c(5, -2, 3, 3),                         B = c(2, 2, 0, 0),                         C = c(-7, 1, 3, -3)) head(plot_data) #>   x y  A B  C #> 1 1 3  5 2 -7 #> 2 2 1 -2 2  1 #> 3 3 4  3 0  3 #> 4 4 2  3 0 -3 ggplot(plot_data %>% pivot_longer(cols = LETTERS[1:3]))+   geom_arc_bar(aes(x0 = x, y0 = y,                    r0 = 0, r = 0.2,                     amount = value,                    fill = name),                 stat = 'pie')+   coord_fixed() ggplot()+   geom_pie_glyph(aes(x = x, y = y),                  categories = c('A','B','C'),                  data = plot_data) #> Error in f(...): Data contains negative values. Remove them before plotting."},{"path":"/articles/unusual-situations.html","id":"missing-levels-within-an-observation","dir":"Articles","previous_headings":"","what":"Missing levels within an observation","title":"Unusual situations","text":"situation can occur data supplied function stacked, attributed present one column, respective values another. might happen times particular observation values attributes particular attribute might dropped data. example can seen Students 1 2 marks subject missing aren’t present data. incomplete structure data causes problems creating pie-charts. data passed function, user notified issue asked complete data.  missing levels data can added follows","code":"plot_data <- data.frame('Student' = c(1,1,2,2,3,3,3),                         'Subject' = c('Maths','Sci', 'Sci','Eng', 'Maths', 'Sci', 'Eng'),                         'Marks' = c(58, 79, 62, 90, 95, 93, 94)) head(plot_data, 7) #>   Student Subject Marks #> 1       1   Maths    58 #> 2       1     Sci    79 #> 3       2     Sci    62 #> 4       2     Eng    90 #> 5       3   Maths    95 #> 6       3     Sci    93 #> 7       3     Eng    94 ggplot(data = plot_data, aes(x = Student, y = 1))+   geom_pie_glyph(categories = 'Subject', values = 'Marks') #> Error in f(...): Certain levels in categories column are missing, possibly due to having 0 or NA values. #> Attempting to add the missing levels, but this might not always work. #> User is recommended to use complete() function from dplyr to add the missing levels back in the data. #> See the \"unusual-situations\" vignette for an example. plot_data <- complete(plot_data, Student, Subject, fill = list(Marks = 0)) head(plot_data, 9) #> # A tibble: 9 × 3 #>   Student Subject Marks #>     <dbl> <chr>   <dbl> #> 1       1 Eng         0 #> 2       1 Maths      58 #> 3       1 Sci        79 #> 4       2 Eng        90 #> 5       2 Maths       0 #> 6       2 Sci        62 #> 7       3 Eng        94 #> 8       3 Maths      95 #> 9       3 Sci        93 ggplot(data = plot_data, aes(x = Student, y = 1))+   geom_pie_glyph(categories = 'Subject', values = 'Marks', radius = 1)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rishabh Vishwakarma. Author, maintainer. Catherine Hurley. Author. Caroline Brophy. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vishwakarma R, Hurley C, Brophy C (2022). PieGlyph: Axis Invariant Scatter Pie Plots. R package version 0.1.0, https://github.com/rishvish/PieGlyph.","code":"@Manual{,   title = {PieGlyph: Axis Invariant Scatter Pie Plots},   author = {Rishabh Vishwakarma and Catherine Hurley and Caroline Brophy},   year = {2022},   note = {R package version 0.1.0},   url = {https://github.com/rishvish/PieGlyph}, }"},{"path":"/index.html","id":"pieglyph-","dir":"","previous_headings":"","what":"Axis Invariant Scatter Pie Plots","title":"Axis Invariant Scatter Pie Plots","text":"PieGlyph R package aimed replacing points plot pie-charts glyphs, showing relative proportions different categories. pie-chart glyphs invariant axes plot dimensions prevent distortions plot dimensions changed.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Axis Invariant Scatter Pie Plots","text":"can install development version PieGlyph GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rishvish/PieGlyph\")"},{"path":[]},{"path":"/index.html","id":"load-libraries","dir":"","previous_headings":"Example","what":"Load libraries","title":"Axis Invariant Scatter Pie Plots","text":"","code":"library(tidyverse) library(PieGlyph)"},{"path":"/index.html","id":"simulate-raw-data","dir":"","previous_headings":"Example","what":"Simulate raw data","title":"Axis Invariant Scatter Pie Plots","text":"","code":"set.seed(777) plot_data <- data.frame(response = rnorm(15, 100, 30),                         system = 1:15,                         group = sample(size = 15, x = c('G1', 'G2', 'G3'), replace = T),                         A = round(runif(15, 3, 9), 2),                         B = round(runif(15, 1, 5), 2),                         C = round(runif(15, 3, 7), 2),                         D = round(runif(15, 1, 9), 2))"},{"path":"/index.html","id":"create-plot","dir":"","previous_headings":"Example","what":"Create plot","title":"Axis Invariant Scatter Pie Plots","text":"","code":"ggplot(data = plot_data, aes(x = system, y = response))+   geom_pie_glyph(categories = c('A', 'B', 'C', 'D'), data = plot_data)+   theme_minimal()"},{"path":"/index.html","id":"alternative-specification","dir":"","previous_headings":"Example","what":"Alternative specification","title":"Axis Invariant Scatter Pie Plots","text":"attributes can also stacked one column generate plot. benefit don’t need specify data geom_pie_glyph function.","code":""},{"path":"/index.html","id":"stack-the-attributes-in-one-column","dir":"","previous_headings":"Example > Alternative specification","what":"Stack the attributes in one column","title":"Axis Invariant Scatter Pie Plots","text":"","code":"plot_data_stacked <- plot_data %>% pivot_longer(cols = c('A','B','C','D'),                                                  names_to = 'Attributes',                                                  values_to = 'values') head(plot_data_stacked, 8) #> # A tibble: 8 × 5 #>   response system group Attributes values #>      <dbl>  <int> <chr> <chr>       <dbl> #> 1    115.       1 G2    A            3.24 #> 2    115.       1 G2    B            2.03 #> 3    115.       1 G2    C            4.35 #> 4    115.       1 G2    D            2.78 #> 5     88.0      2 G2    A            3.96 #> 6     88.0      2 G2    B            4.74 #> 7     88.0      2 G2    C            4.66 #> 8     88.0      2 G2    D            8.45"},{"path":"/index.html","id":"create-plot-1","dir":"","previous_headings":"Example > Alternative specification","what":"Create plot","title":"Axis Invariant Scatter Pie Plots","text":"","code":"ggplot(data = plot_data_stacked, aes(x = system, y = response))+   # Along with categories column, values column is also needed now   geom_pie_glyph(categories = 'Attributes', values = 'values')+   theme_minimal()"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/reference/draw_key_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Legend key for the pie glyphs — draw_key_pie","title":"Legend key for the pie glyphs — draw_key_pie","text":"Controls aesthetics legend entries pie glyphs","code":""},{"path":"/reference/draw_key_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Legend key for the pie glyphs — draw_key_pie","text":"","code":"draw_key_pie(data, params, size)"},{"path":"/reference/draw_key_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Legend key for the pie glyphs — draw_key_pie","text":"data single row data frame containing scaled aesthetics display key params list additional parameters supplied geom. size Width height key mm.","code":""},{"path":"/reference/draw_key_pie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Legend key for the pie glyphs — draw_key_pie","text":"grid grob","code":""},{"path":[]},{"path":"/reference/geom_pie_glyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot with pie-chart glyphs — geom_pie_glyph","title":"Scatter plot with pie-chart glyphs — geom_pie_glyph","text":"geom helps replace points scatter plot pie-chart glyphs showing relative proportions different categories. pie glyphs independent plot dimensions, distort plot scaled.","code":""},{"path":"/reference/geom_pie_glyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot with pie-chart glyphs — geom_pie_glyph","text":"","code":"geom_pie_glyph(   mapping = NULL,   data = NULL,   categories,   values = NA,   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/geom_pie_glyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot with pie-chart glyphs — geom_pie_glyph","text":"mapping Set aesthetic (see Aesthetics ) mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer plot. default, NULL, inherits plot data specified ggplot() call. categories pie glyph plot shows relative abundances set categories; categories specified argument. names categories can stacked contained single column (long format using pivot_longer()) can names individual columns (wide format). categories can also specified numeric indices columns. values categories stacked one column, parameter describes column values categories shown pie glyphs. values numeric proportions different categories within observation calculated automatically. default NA assuming categories separate columns. stat statistical transformation use data layer, string position Position adjustment avoid overlapping pie glyphs. na.rm categories observation NA, observation dropped least one category NA, categories assumed 0. parameter indicates whether user notified changes. FALSE, default, user given warning. TRUE, observations silently removed/modified 0, without notifying user. show.legend Logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. inherit.aes FALSE, overrides default aesthetics, rather combining ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" radius = 1. may also parameters paired geom/stat.","code":""},{"path":"/reference/geom_pie_glyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot with pie-chart glyphs — geom_pie_glyph","text":"ggplot layer","code":""},{"path":"/reference/geom_pie_glyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Scatter plot with pie-chart glyphs — geom_pie_glyph","text":"geom_pie_glyph understands following aesthetics (required aesthetics bold): x - variable shown X-axis y - variable shown Y-axis alpha - adjust opacity pie glyphs radius - adjust radius pie glyphs (cm) colour - specify colour border pie glyphs linetype - specify style pie glyph borders size - specify width pie glyph borders (mm)","code":""},{"path":"/reference/geom_pie_glyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot with pie-chart glyphs — geom_pie_glyph","text":"","code":"## Load libraries library(tidyverse) library(PieGlyph)  ## Simulate raw data set.seed(123) plot_data <- data.frame(response = rnorm(10, 100, 30),                         system = 1:10,                         group = sample(size = 10,                                        x = c('G1', 'G2', 'G3'),                                        replace = TRUE),                         A = round(runif(10, 3, 9), 2),                         B = round(runif(10, 1, 5), 2),                         C = round(runif(10, 3, 7), 2),                         D = round(runif(10, 1, 9), 2))  head(plot_data) #>    response system group    A    B    C    D #> 1  83.18573      1    G1 7.14 2.65 6.20 4.07 #> 2  93.09468      2    G1 7.77 2.48 3.49 3.20 #> 3 146.76125      3    G1 3.15 1.61 5.24 7.52 #> 4 102.11525      4    G1 5.87 1.56 3.83 4.59 #> 5 103.87863      5    G3 7.55 1.93 3.51 7.48 #> 6 151.45195      6    G2 4.30 2.86 6.01 7.50  ## Basic plot ggplot(data = plot_data, aes(x = system, y = response))+    geom_pie_glyph(categories = c('A', 'B', 'C', 'D'),                   data = plot_data)+    theme_minimal()    ## Change pie radius and border colour ggplot(data = plot_data, aes(x = system, y = response))+        # Can also specify categories as column indices        geom_pie_glyph(categories = 4:7, data = plot_data,                       colour = 'black', radius = 1)+        theme_minimal()    ## Map size to a variable p <- ggplot(data = plot_data, aes(x = system, y = response))+ geom_pie_glyph(aes(radius = group),             categories = c('A', 'B', 'C', 'D'),             data = plot_data, colour = 'black')+             theme_minimal() p    ## Add custom labels p <- p + labs(x = 'System', y = 'Response',               fill = 'Attributes', radius = 'Group') p    ## Change category colours p + scale_fill_manual(values = c('#56B4E9', '#CC79A7',                                  '#F0E442', '#D55E00'))     ##### Stack the attributes in one column # The attributes can also be stacked into one column to generate # the plot. The benefit of doing this is that we do not need to # specify the data again in the geom_pie_glyph function  plot_data_stacked <- plot_data %>%                         pivot_longer(cols = c('A','B','C','D'),                                      names_to = 'Attributes',                                      values_to = 'values') head(plot_data_stacked, 8) #> # A tibble: 8 × 5 #>   response system group Attributes values #>      <dbl>  <int> <chr> <chr>       <dbl> #> 1     83.2      1 G1    A            7.14 #> 2     83.2      1 G1    B            2.65 #> 3     83.2      1 G1    C            6.2  #> 4     83.2      1 G1    D            4.07 #> 5     93.1      2 G1    A            7.77 #> 6     93.1      2 G1    B            2.48 #> 7     93.1      2 G1    C            3.49 #> 8     93.1      2 G1    D            3.2    ggplot(data = plot_data_stacked, aes(x = system, y = response))+   # Along with categories column, values column is also needed now   geom_pie_glyph(categories = 'Attributes', values = 'values')+   theme_minimal()"},{"path":"/reference/PieGlyph-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PieGlyph: Axis invariant scatter pie plots — PieGlyph-package","title":"PieGlyph: Axis invariant scatter pie plots — PieGlyph-package","text":"packages helps replace points scatter plot pie-chart glyphs showing relative proportions different categories. pie glyphs independent axes plot dimensions prevent distortions plot dimensions changed.","code":""},{"path":"/reference/PieGlyph-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PieGlyph: Axis invariant scatter pie plots — PieGlyph-package","text":"Maintainter: Rishabh Vishwakarma vishwakr@tcd.ie (ORCID) Authors: Catherine Hurley Caroline Brophy","code":""},{"path":"/reference/PieGlyph-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PieGlyph: Axis invariant scatter pie plots — PieGlyph-package","text":"","code":"## Load libraries library(tidyverse) library(PieGlyph)  ## Simulate raw data set.seed(123) plot_data <- data.frame(response = rnorm(30, 100, 30),                         system = 1:30,                         group = sample(size = 30,                                        x = c('G1', 'G2', 'G3'),                                        replace = TRUE),                         A = round(runif(30, 3, 9), 2),                         B = round(runif(30, 1, 5), 2),                         C = round(runif(30, 3, 7), 2),                         D = round(runif(30, 1, 9), 2))  head(plot_data) #>    response system group    A    B    C    D #> 1  83.18573      1    G1 5.80 1.57 4.78 8.31 #> 2  93.09468      2    G3 6.07 3.76 3.87 8.21 #> 3 146.76125      3    G1 6.60 3.48 5.01 3.19 #> 4 102.11525      4    G2 5.00 4.57 4.42 3.57 #> 5 103.87863      5    G1 5.93 3.69 5.60 8.89 #> 6 151.45195      6    G1 8.73 3.95 4.50 5.96  ## Basic plot ggplot(data = plot_data, aes(x = system, y = response))+    geom_pie_glyph(categories = c('A', 'B', 'C', 'D'),                   data = plot_data)+    theme_minimal()    ##### Stack the attributes in one column # The attributes can also be stacked into one column to generate # the plot. The benefit of doing this is that we do not need to # specify the data again in the geom_pie_glyph function  plot_data_stacked <- plot_data %>%                         pivot_longer(cols = c('A','B','C','D'),                                      names_to = 'Attributes',                                      values_to = 'values') head(plot_data_stacked, 8) #> # A tibble: 8 × 5 #>   response system group Attributes values #>      <dbl>  <int> <chr> <chr>       <dbl> #> 1     83.2      1 G1    A            5.8  #> 2     83.2      1 G1    B            1.57 #> 3     83.2      1 G1    C            4.78 #> 4     83.2      1 G1    D            8.31 #> 5     93.1      2 G3    A            6.07 #> 6     93.1      2 G3    B            3.76 #> 7     93.1      2 G3    C            3.87 #> 8     93.1      2 G3    D            8.21   ggplot(data = plot_data_stacked, aes(x = system, y = response))+   # Along with categories column, values column is also needed now   geom_pie_glyph(categories = 'Attributes', values = 'values')+   theme_minimal()"},{"path":"/reference/scale_radius_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales for the pie glyph radius — scale_radius_discrete","title":"Scales for the pie glyph radius — scale_radius_discrete","text":"scale_radius_*() useful adjusting radius pie glyphs.","code":""},{"path":"/reference/scale_radius_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales for the pie glyph radius — scale_radius_discrete","text":"","code":"scale_radius_discrete(..., range = c(0.5, 1.5), unit = \"cm\")  scale_radius_manual(..., values, unit = \"cm\", breaks = waiver(), na.value = NA)  scale_radius_continuous(..., range = c(0.5, 1.5), unit = \"cm\")  scale_radius(..., range = c(0.5, 1.5), unit = \"cm\")"},{"path":"/reference/scale_radius_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales for the pie glyph radius — scale_radius_discrete","text":"... Arguments passed continuous_scale minor_breaks One : NULL minor breaks waiver() default breaks (one minor break major break) numeric vector positions function given limits returns vector minor breaks. Also accepts rlang lambda function notation. oob One : Function handles limits outside scale limits (bounds). Also accepts rlang lambda function notation. default (scales::censor()) replaces bounds values NA. scales::squish() squishing bounds values range. scales::squish_infinite() squishing infinite values range. na.value Missing values replaced value. expand position scales, vector range expansion constants used add padding around data ensure placed distance away axes. Use convenience function expansion() generate values expand argument. defaults expand scale 5% side continuous variables, 0.6 units side discrete variables. position position scales, position axis. left right y axes, top bottom x axes. super super class use constructed scale range numeric vector length 2 specifies minimum maximum size plotting symbol transformation. unit Unit radius pie glyphs. Default 'cm', units like '', 'mm', etc. can used. values set aesthetic values map data values . values matched order (usually alphabetical) limits scale, breaks provided. named vector, values matched based names instead. Data values match given na.value. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. na.value aesthetic value use missing (NA) values","code":""},{"path":"/reference/scale_radius_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales for the pie glyph radius — scale_radius_discrete","text":"","code":"## Load libraries library(tidyverse) library(PieGlyph)  ## Simulate raw data set.seed(789) plot_data <- data.frame(y = rnorm(10, 100, 30),                         x = 1:10,                         group = sample(size = 10,                                        x = c(1, 2, 3),                                        replace = TRUE),                         A = round(runif(10, 3, 9), 2),                         B = round(runif(10, 1, 5), 2),                         C = round(runif(10, 3, 7), 2),                         D = round(runif(10, 1, 9), 2))  head(plot_data) #>           y x group    A    B    C    D #> 1 115.72290 1     3 4.67 4.15 3.15 6.64 #> 2  32.17696 2     2 6.98 4.01 4.58 2.03 #> 3  99.40961 3     2 5.94 4.99 6.71 6.34 #> 4 105.49420 4     1 4.63 1.78 4.68 6.83 #> 5  89.15946 5     2 5.62 1.66 6.68 7.00 #> 6  85.46548 6     2 6.50 3.57 6.22 6.71   ## Create plot p <- ggplot()+     geom_pie_glyph(aes(x = x, y = y, radius = group),     categories = c('A', 'B', 'C', 'D'), colour = NA,     data = plot_data)+     labs(y = 'Response', x = 'System',          fill = 'Attributes')+     theme_classic()  p + scale_radius_continuous(range = c(1, 2))   q <- ggplot(data = plot_data)+     geom_pie_glyph(aes(x = x, y = y,                        radius = as.factor(group)),                    categories = c('A', 'B', 'C', 'D'),                    colour = NA, data = plot_data)+     labs(y = 'Response', x = 'System',          fill = 'Attributes', radius = 'Group')+     theme_classic()  q + scale_radius_discrete(range = c(0.1, 0.2), unit = 'in',                           name = 'Group')   q + scale_radius_manual(values = c(5, 20, 10), unit = 'mm',                         labels = paste0('G', 1:3), name = 'G')"}]
